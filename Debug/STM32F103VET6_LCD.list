
STM32F103VET6_LCD.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000189c  08000110  08000110  00010110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .ARM.attributes 00000029  080019ac  080019ac  00020008  2**0
                  CONTENTS, READONLY
  3 .init_array   00000004  080019ac  080019ac  000119ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  080019b0  080019b0  000119b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000008  20000000  080019b4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          000017a0  20000008  080019bc  00020008  2**2
                  ALLOC
  7 ._user_heap_stack 00000200  200017a8  0800315c  00020008  2**0
                  ALLOC
  8 .debug_info   0000a1d8  00000000  00000000  00020031  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 00001b78  00000000  00000000  0002a209  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 00000678  00000000  00000000  0002bd88  2**3
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000005a0  00000000  00000000  0002c400  2**3
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  00002d5a  00000000  00000000  0002c9a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   00007da2  00000000  00000000  0002f6fa  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    0005b276  00000000  00000000  0003749c  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .comment      0000007b  00000000  00000000  00092712  2**0
                  CONTENTS, READONLY
 16 .debug_frame  000017e8  00000000  00000000  00092790  2**2
                  CONTENTS, READONLY, DEBUGGING
 17 .stabstr      0000003f  00000000  00000000  00093f78  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000008 	.word	0x20000008
 800012c:	00000000 	.word	0x00000000
 8000130:	0800010c 	.word	0x0800010c

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	2000000c 	.word	0x2000000c
 800014c:	0800010c 	.word	0x0800010c

08000150 <DISPLAY_point_color>:
void DISPLAY_point_color(uint16_t color);
void DISPLAY_scr_fill(uint16_t sx,uint16_t sy, uint16_t ex,u16 ey,uint16_t color);


void DISPLAY_point_color(uint16_t color)
{
 8000150:	b580      	push	{r7, lr}
 8000152:	b082      	sub	sp, #8
 8000154:	af00      	add	r7, sp, #0
 8000156:	4603      	mov	r3, r0
 8000158:	80fb      	strh	r3, [r7, #6]
	ILI9431_write_data(color);
 800015a:	88fb      	ldrh	r3, [r7, #6]
 800015c:	4618      	mov	r0, r3
 800015e:	f000 f89f 	bl	80002a0 <ILI9431_write_data>
}
 8000162:	bf00      	nop
 8000164:	3708      	adds	r7, #8
 8000166:	46bd      	mov	sp, r7
 8000168:	bd80      	pop	{r7, pc}

0800016a <DISPLAY_scr_fill>:

void DISPLAY_scr_fill(uint16_t sx,uint16_t sy, uint16_t ex,u16 ey,uint16_t color)
{
 800016a:	b590      	push	{r4, r7, lr}
 800016c:	b085      	sub	sp, #20
 800016e:	af00      	add	r7, sp, #0
 8000170:	4604      	mov	r4, r0
 8000172:	4608      	mov	r0, r1
 8000174:	4611      	mov	r1, r2
 8000176:	461a      	mov	r2, r3
 8000178:	4623      	mov	r3, r4
 800017a:	80fb      	strh	r3, [r7, #6]
 800017c:	4603      	mov	r3, r0
 800017e:	80bb      	strh	r3, [r7, #4]
 8000180:	460b      	mov	r3, r1
 8000182:	807b      	strh	r3, [r7, #2]
 8000184:	4613      	mov	r3, r2
 8000186:	803b      	strh	r3, [r7, #0]
	uint32_t i;
	uint16_t width=ex-sx+1;
 8000188:	887a      	ldrh	r2, [r7, #2]
 800018a:	88fb      	ldrh	r3, [r7, #6]
 800018c:	1ad3      	subs	r3, r2, r3
 800018e:	b29b      	uxth	r3, r3
 8000190:	3301      	adds	r3, #1
 8000192:	817b      	strh	r3, [r7, #10]
	uint16_t height=ey-sy+1;
 8000194:	883a      	ldrh	r2, [r7, #0]
 8000196:	88bb      	ldrh	r3, [r7, #4]
 8000198:	1ad3      	subs	r3, r2, r3
 800019a:	b29b      	uxth	r3, r3
 800019c:	3301      	adds	r3, #1
 800019e:	813b      	strh	r3, [r7, #8]
	ILI9431_set_windows(sx,sy,ex-1,ey-1);
 80001a0:	887b      	ldrh	r3, [r7, #2]
 80001a2:	3b01      	subs	r3, #1
 80001a4:	b29a      	uxth	r2, r3
 80001a6:	883b      	ldrh	r3, [r7, #0]
 80001a8:	3b01      	subs	r3, #1
 80001aa:	b29b      	uxth	r3, r3
 80001ac:	88b9      	ldrh	r1, [r7, #4]
 80001ae:	88f8      	ldrh	r0, [r7, #6]
 80001b0:	f000 f8b8 	bl	8000324 <ILI9431_set_windows>
	i = height*width;
 80001b4:	893b      	ldrh	r3, [r7, #8]
 80001b6:	897a      	ldrh	r2, [r7, #10]
 80001b8:	fb02 f303 	mul.w	r3, r2, r3
 80001bc:	60fb      	str	r3, [r7, #12]
	while(i--)
 80001be:	e003      	b.n	80001c8 <DISPLAY_scr_fill+0x5e>
	{
		DISPLAY_point_color(color);
 80001c0:	8c3b      	ldrh	r3, [r7, #32]
 80001c2:	4618      	mov	r0, r3
 80001c4:	f7ff ffc4 	bl	8000150 <DISPLAY_point_color>
	while(i--)
 80001c8:	68fb      	ldr	r3, [r7, #12]
 80001ca:	1e5a      	subs	r2, r3, #1
 80001cc:	60fa      	str	r2, [r7, #12]
 80001ce:	2b00      	cmp	r3, #0
 80001d0:	d1f6      	bne.n	80001c0 <DISPLAY_scr_fill+0x56>
	}
}
 80001d2:	bf00      	nop
 80001d4:	3714      	adds	r7, #20
 80001d6:	46bd      	mov	sp, r7
 80001d8:	bd90      	pop	{r4, r7, pc}
	...

080001dc <ILI9431_set_gpio>:


ILI9431_infor_st ILI9431;

void ILI9431_set_gpio(void)
{
 80001dc:	b580      	push	{r7, lr}
 80001de:	b082      	sub	sp, #8
 80001e0:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStructure;

	RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOD|RCC_APB2Periph_GPIOB|RCC_APB2Periph_AFIO, ENABLE);
 80001e2:	2101      	movs	r1, #1
 80001e4:	2029      	movs	r0, #41	; 0x29
 80001e6:	f001 fa73 	bl	80016d0 <RCC_APB2PeriphClockCmd>

	GPIO_InitStructure.GPIO_Pin 	= LCD_GPIO_PIN_RST | LCD_GPIO_PIN_RD | LCD_GPIO_PIN_WR | LCD_GPIO_PIN_RS | LCD_GPIO_PIN_CS | LCD_GPIO_LED;	   //GPIO_Pin_10
 80001ea:	f241 03f8 	movw	r3, #4344	; 0x10f8
 80001ee:	80bb      	strh	r3, [r7, #4]
	GPIO_InitStructure.GPIO_Mode 	= GPIO_Mode_Out_PP;
 80001f0:	2310      	movs	r3, #16
 80001f2:	71fb      	strb	r3, [r7, #7]
	GPIO_InitStructure.GPIO_Speed 	= GPIO_Speed_50MHz;
 80001f4:	2303      	movs	r3, #3
 80001f6:	71bb      	strb	r3, [r7, #6]
	GPIO_Init(LCD_GPIO_PORT_SET, &GPIO_InitStructure);
 80001f8:	1d3b      	adds	r3, r7, #4
 80001fa:	4619      	mov	r1, r3
 80001fc:	480d      	ldr	r0, [pc, #52]	; (8000234 <ILI9431_set_gpio+0x58>)
 80001fe:	f001 f99d 	bl	800153c <GPIO_Init>

	GPIO_SetBits(LCD_GPIO_PORT_SET, LCD_GPIO_PIN_RST | LCD_GPIO_PIN_RD | LCD_GPIO_PIN_WR | LCD_GPIO_PIN_RS | LCD_GPIO_PIN_CS);
 8000202:	21f8      	movs	r1, #248	; 0xf8
 8000204:	480b      	ldr	r0, [pc, #44]	; (8000234 <ILI9431_set_gpio+0x58>)
 8000206:	f001 fa55 	bl	80016b4 <GPIO_SetBits>

	GPIO_InitStructure.GPIO_Pin 	= GPIO_Pin_All;
 800020a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800020e:	80bb      	strh	r3, [r7, #4]
	GPIO_InitStructure.GPIO_Mode 	= GPIO_Mode_Out_PP;
 8000210:	2310      	movs	r3, #16
 8000212:	71fb      	strb	r3, [r7, #7]
	GPIO_InitStructure.GPIO_Speed 	= GPIO_Speed_50MHz;
 8000214:	2303      	movs	r3, #3
 8000216:	71bb      	strb	r3, [r7, #6]

	GPIO_Init(GPIOD, &GPIO_InitStructure);
 8000218:	1d3b      	adds	r3, r7, #4
 800021a:	4619      	mov	r1, r3
 800021c:	4806      	ldr	r0, [pc, #24]	; (8000238 <ILI9431_set_gpio+0x5c>)
 800021e:	f001 f98d 	bl	800153c <GPIO_Init>
	GPIO_SetBits(GPIOD,GPIO_Pin_All);
 8000222:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8000226:	4804      	ldr	r0, [pc, #16]	; (8000238 <ILI9431_set_gpio+0x5c>)
 8000228:	f001 fa44 	bl	80016b4 <GPIO_SetBits>
}
 800022c:	bf00      	nop
 800022e:	3708      	adds	r7, #8
 8000230:	46bd      	mov	sp, r7
 8000232:	bd80      	pop	{r7, pc}
 8000234:	40010c00 	.word	0x40010c00
 8000238:	40011400 	.word	0x40011400

0800023c <ILI9431_reset>:

void ILI9431_reset(void)
{
 800023c:	b580      	push	{r7, lr}
 800023e:	af00      	add	r7, sp, #0
	LCD_RST_CLR;
 8000240:	4b06      	ldr	r3, [pc, #24]	; (800025c <ILI9431_reset+0x20>)
 8000242:	2208      	movs	r2, #8
 8000244:	615a      	str	r2, [r3, #20]
	Delay_ms(100);
 8000246:	2064      	movs	r0, #100	; 0x64
 8000248:	f000 fa92 	bl	8000770 <TIMEOUT_delay_ms>
	LCD_RST_SET;
 800024c:	4b03      	ldr	r3, [pc, #12]	; (800025c <ILI9431_reset+0x20>)
 800024e:	2208      	movs	r2, #8
 8000250:	611a      	str	r2, [r3, #16]
	Delay_ms(50);
 8000252:	2032      	movs	r0, #50	; 0x32
 8000254:	f000 fa8c 	bl	8000770 <TIMEOUT_delay_ms>
}
 8000258:	bf00      	nop
 800025a:	bd80      	pop	{r7, pc}
 800025c:	40010c00 	.word	0x40010c00

08000260 <ILI9431_write_reg>:
{
	return LCD->LCD_RAM;
}

void ILI9431_write_reg(uint8_t byte)
{
 8000260:	b480      	push	{r7}
 8000262:	b083      	sub	sp, #12
 8000264:	af00      	add	r7, sp, #0
 8000266:	4603      	mov	r3, r0
 8000268:	71fb      	strb	r3, [r7, #7]
	LCD_RS_CLR;
 800026a:	4b0b      	ldr	r3, [pc, #44]	; (8000298 <ILI9431_write_reg+0x38>)
 800026c:	2240      	movs	r2, #64	; 0x40
 800026e:	615a      	str	r2, [r3, #20]
	LCD_CS_CLR;
 8000270:	4b09      	ldr	r3, [pc, #36]	; (8000298 <ILI9431_write_reg+0x38>)
 8000272:	2280      	movs	r2, #128	; 0x80
 8000274:	615a      	str	r2, [r3, #20]
	DATAOUT(byte);
 8000276:	4a09      	ldr	r2, [pc, #36]	; (800029c <ILI9431_write_reg+0x3c>)
 8000278:	79fb      	ldrb	r3, [r7, #7]
 800027a:	60d3      	str	r3, [r2, #12]
	LCD_WR_CLR;
 800027c:	4b06      	ldr	r3, [pc, #24]	; (8000298 <ILI9431_write_reg+0x38>)
 800027e:	2220      	movs	r2, #32
 8000280:	615a      	str	r2, [r3, #20]
	LCD_WR_SET;
 8000282:	4b05      	ldr	r3, [pc, #20]	; (8000298 <ILI9431_write_reg+0x38>)
 8000284:	2220      	movs	r2, #32
 8000286:	611a      	str	r2, [r3, #16]
	LCD_CS_SET;
 8000288:	4b03      	ldr	r3, [pc, #12]	; (8000298 <ILI9431_write_reg+0x38>)
 800028a:	2280      	movs	r2, #128	; 0x80
 800028c:	611a      	str	r2, [r3, #16]
}
 800028e:	bf00      	nop
 8000290:	370c      	adds	r7, #12
 8000292:	46bd      	mov	sp, r7
 8000294:	bc80      	pop	{r7}
 8000296:	4770      	bx	lr
 8000298:	40010c00 	.word	0x40010c00
 800029c:	40011400 	.word	0x40011400

080002a0 <ILI9431_write_data>:

void ILI9431_write_data(uint16_t data)
{
 80002a0:	b480      	push	{r7}
 80002a2:	b083      	sub	sp, #12
 80002a4:	af00      	add	r7, sp, #0
 80002a6:	4603      	mov	r3, r0
 80002a8:	80fb      	strh	r3, [r7, #6]
	LCD_RS_SET;
 80002aa:	4b0b      	ldr	r3, [pc, #44]	; (80002d8 <ILI9431_write_data+0x38>)
 80002ac:	2240      	movs	r2, #64	; 0x40
 80002ae:	611a      	str	r2, [r3, #16]
	LCD_CS_CLR;
 80002b0:	4b09      	ldr	r3, [pc, #36]	; (80002d8 <ILI9431_write_data+0x38>)
 80002b2:	2280      	movs	r2, #128	; 0x80
 80002b4:	615a      	str	r2, [r3, #20]
	DATAOUT(data);
 80002b6:	4a09      	ldr	r2, [pc, #36]	; (80002dc <ILI9431_write_data+0x3c>)
 80002b8:	88fb      	ldrh	r3, [r7, #6]
 80002ba:	60d3      	str	r3, [r2, #12]
	LCD_WR_CLR;
 80002bc:	4b06      	ldr	r3, [pc, #24]	; (80002d8 <ILI9431_write_data+0x38>)
 80002be:	2220      	movs	r2, #32
 80002c0:	615a      	str	r2, [r3, #20]
	LCD_WR_SET;
 80002c2:	4b05      	ldr	r3, [pc, #20]	; (80002d8 <ILI9431_write_data+0x38>)
 80002c4:	2220      	movs	r2, #32
 80002c6:	611a      	str	r2, [r3, #16]
	LCD_CS_SET;
 80002c8:	4b03      	ldr	r3, [pc, #12]	; (80002d8 <ILI9431_write_data+0x38>)
 80002ca:	2280      	movs	r2, #128	; 0x80
 80002cc:	611a      	str	r2, [r3, #16]
}
 80002ce:	bf00      	nop
 80002d0:	370c      	adds	r7, #12
 80002d2:	46bd      	mov	sp, r7
 80002d4:	bc80      	pop	{r7}
 80002d6:	4770      	bx	lr
 80002d8:	40010c00 	.word	0x40010c00
 80002dc:	40011400 	.word	0x40011400

080002e0 <ILI9431_write_ram_pre>:
void ILI9431_write_ram_pre(void)
{
 80002e0:	b580      	push	{r7, lr}
 80002e2:	af00      	add	r7, sp, #0
	ILI9431_write_reg(ILI9431.wramcmd);
 80002e4:	4b03      	ldr	r3, [pc, #12]	; (80002f4 <ILI9431_write_ram_pre+0x14>)
 80002e6:	891b      	ldrh	r3, [r3, #8]
 80002e8:	b2db      	uxtb	r3, r3
 80002ea:	4618      	mov	r0, r3
 80002ec:	f7ff ffb8 	bl	8000260 <ILI9431_write_reg>
}
 80002f0:	bf00      	nop
 80002f2:	bd80      	pop	{r7, pc}
 80002f4:	20001564 	.word	0x20001564

080002f8 <ILI9431_write_Reg_Data>:

void ILI9431_write_Reg_Data(uint8_t LCD_Reg, uint8_t LCD_RegValue)
{
 80002f8:	b580      	push	{r7, lr}
 80002fa:	b082      	sub	sp, #8
 80002fc:	af00      	add	r7, sp, #0
 80002fe:	4603      	mov	r3, r0
 8000300:	460a      	mov	r2, r1
 8000302:	71fb      	strb	r3, [r7, #7]
 8000304:	4613      	mov	r3, r2
 8000306:	71bb      	strb	r3, [r7, #6]
	ILI9431_write_reg(LCD_Reg);
 8000308:	79fb      	ldrb	r3, [r7, #7]
 800030a:	4618      	mov	r0, r3
 800030c:	f7ff ffa8 	bl	8000260 <ILI9431_write_reg>
	ILI9431_write_data(LCD_RegValue);
 8000310:	79bb      	ldrb	r3, [r7, #6]
 8000312:	b29b      	uxth	r3, r3
 8000314:	4618      	mov	r0, r3
 8000316:	f7ff ffc3 	bl	80002a0 <ILI9431_write_data>
}
 800031a:	bf00      	nop
 800031c:	3708      	adds	r7, #8
 800031e:	46bd      	mov	sp, r7
 8000320:	bd80      	pop	{r7, pc}
	...

08000324 <ILI9431_set_windows>:

	ILI9431_write_ram_pre();
}

void ILI9431_set_windows(u16 xStar, u16 yStar,u16 xEnd,u16 yEnd)
{
 8000324:	b590      	push	{r4, r7, lr}
 8000326:	b083      	sub	sp, #12
 8000328:	af00      	add	r7, sp, #0
 800032a:	4604      	mov	r4, r0
 800032c:	4608      	mov	r0, r1
 800032e:	4611      	mov	r1, r2
 8000330:	461a      	mov	r2, r3
 8000332:	4623      	mov	r3, r4
 8000334:	80fb      	strh	r3, [r7, #6]
 8000336:	4603      	mov	r3, r0
 8000338:	80bb      	strh	r3, [r7, #4]
 800033a:	460b      	mov	r3, r1
 800033c:	807b      	strh	r3, [r7, #2]
 800033e:	4613      	mov	r3, r2
 8000340:	803b      	strh	r3, [r7, #0]
	ILI9431_write_reg(ILI9431.setxcmd);
 8000342:	4b21      	ldr	r3, [pc, #132]	; (80003c8 <ILI9431_set_windows+0xa4>)
 8000344:	895b      	ldrh	r3, [r3, #10]
 8000346:	b2db      	uxtb	r3, r3
 8000348:	4618      	mov	r0, r3
 800034a:	f7ff ff89 	bl	8000260 <ILI9431_write_reg>
	ILI9431_write_data(xStar>>8);
 800034e:	88fb      	ldrh	r3, [r7, #6]
 8000350:	0a1b      	lsrs	r3, r3, #8
 8000352:	b29b      	uxth	r3, r3
 8000354:	4618      	mov	r0, r3
 8000356:	f7ff ffa3 	bl	80002a0 <ILI9431_write_data>
	ILI9431_write_data(0x00FF&xStar);
 800035a:	88fb      	ldrh	r3, [r7, #6]
 800035c:	b2db      	uxtb	r3, r3
 800035e:	b29b      	uxth	r3, r3
 8000360:	4618      	mov	r0, r3
 8000362:	f7ff ff9d 	bl	80002a0 <ILI9431_write_data>
	ILI9431_write_data(xEnd>>8);
 8000366:	887b      	ldrh	r3, [r7, #2]
 8000368:	0a1b      	lsrs	r3, r3, #8
 800036a:	b29b      	uxth	r3, r3
 800036c:	4618      	mov	r0, r3
 800036e:	f7ff ff97 	bl	80002a0 <ILI9431_write_data>
	ILI9431_write_data(0x00FF&xEnd);
 8000372:	887b      	ldrh	r3, [r7, #2]
 8000374:	b2db      	uxtb	r3, r3
 8000376:	b29b      	uxth	r3, r3
 8000378:	4618      	mov	r0, r3
 800037a:	f7ff ff91 	bl	80002a0 <ILI9431_write_data>

	ILI9431_write_reg(ILI9431.setycmd);
 800037e:	4b12      	ldr	r3, [pc, #72]	; (80003c8 <ILI9431_set_windows+0xa4>)
 8000380:	899b      	ldrh	r3, [r3, #12]
 8000382:	b2db      	uxtb	r3, r3
 8000384:	4618      	mov	r0, r3
 8000386:	f7ff ff6b 	bl	8000260 <ILI9431_write_reg>
	ILI9431_write_data(yStar>>8);
 800038a:	88bb      	ldrh	r3, [r7, #4]
 800038c:	0a1b      	lsrs	r3, r3, #8
 800038e:	b29b      	uxth	r3, r3
 8000390:	4618      	mov	r0, r3
 8000392:	f7ff ff85 	bl	80002a0 <ILI9431_write_data>
	ILI9431_write_data(0x00FF&yStar);
 8000396:	88bb      	ldrh	r3, [r7, #4]
 8000398:	b2db      	uxtb	r3, r3
 800039a:	b29b      	uxth	r3, r3
 800039c:	4618      	mov	r0, r3
 800039e:	f7ff ff7f 	bl	80002a0 <ILI9431_write_data>
	ILI9431_write_data(yEnd>>8);
 80003a2:	883b      	ldrh	r3, [r7, #0]
 80003a4:	0a1b      	lsrs	r3, r3, #8
 80003a6:	b29b      	uxth	r3, r3
 80003a8:	4618      	mov	r0, r3
 80003aa:	f7ff ff79 	bl	80002a0 <ILI9431_write_data>
	ILI9431_write_data(0x00FF&yEnd);
 80003ae:	883b      	ldrh	r3, [r7, #0]
 80003b0:	b2db      	uxtb	r3, r3
 80003b2:	b29b      	uxth	r3, r3
 80003b4:	4618      	mov	r0, r3
 80003b6:	f7ff ff73 	bl	80002a0 <ILI9431_write_data>

	ILI9431_write_ram_pre();	//????GRAM
 80003ba:	f7ff ff91 	bl	80002e0 <ILI9431_write_ram_pre>
}
 80003be:	bf00      	nop
 80003c0:	370c      	adds	r7, #12
 80003c2:	46bd      	mov	sp, r7
 80003c4:	bd90      	pop	{r4, r7, pc}
 80003c6:	bf00      	nop
 80003c8:	20001564 	.word	0x20001564

080003cc <ILI9431_set_param>:

void ILI9431_set_param(void)
{
 80003cc:	b580      	push	{r7, lr}
 80003ce:	af00      	add	r7, sp, #0
//	USE_HORIZONTAL
	ILI9431.wramcmd	= 0x2C;
 80003d0:	4b0c      	ldr	r3, [pc, #48]	; (8000404 <ILI9431_set_param+0x38>)
 80003d2:	222c      	movs	r2, #44	; 0x2c
 80003d4:	811a      	strh	r2, [r3, #8]
	ILI9431.dir		= 1;
 80003d6:	4b0b      	ldr	r3, [pc, #44]	; (8000404 <ILI9431_set_param+0x38>)
 80003d8:	2201      	movs	r2, #1
 80003da:	719a      	strb	r2, [r3, #6]
	ILI9431.width	= 320;
 80003dc:	4b09      	ldr	r3, [pc, #36]	; (8000404 <ILI9431_set_param+0x38>)
 80003de:	f44f 72a0 	mov.w	r2, #320	; 0x140
 80003e2:	801a      	strh	r2, [r3, #0]
	ILI9431.height	= 240;
 80003e4:	4b07      	ldr	r3, [pc, #28]	; (8000404 <ILI9431_set_param+0x38>)
 80003e6:	22f0      	movs	r2, #240	; 0xf0
 80003e8:	805a      	strh	r2, [r3, #2]
	ILI9431.setxcmd	= 0x2A;
 80003ea:	4b06      	ldr	r3, [pc, #24]	; (8000404 <ILI9431_set_param+0x38>)
 80003ec:	222a      	movs	r2, #42	; 0x2a
 80003ee:	815a      	strh	r2, [r3, #10]
	ILI9431.setycmd	= 0x2B;
 80003f0:	4b04      	ldr	r3, [pc, #16]	; (8000404 <ILI9431_set_param+0x38>)
 80003f2:	222b      	movs	r2, #43	; 0x2b
 80003f4:	819a      	strh	r2, [r3, #12]
	ILI9431_write_Reg_Data(0x36,0x6C);
 80003f6:	216c      	movs	r1, #108	; 0x6c
 80003f8:	2036      	movs	r0, #54	; 0x36
 80003fa:	f7ff ff7d 	bl	80002f8 <ILI9431_write_Reg_Data>
}
 80003fe:	bf00      	nop
 8000400:	bd80      	pop	{r7, pc}
 8000402:	bf00      	nop
 8000404:	20001564 	.word	0x20001564

08000408 <ILI9431_init>:
//void ILI9431_
//void ILI9431_


void ILI9431_init(void)
{
 8000408:	b580      	push	{r7, lr}
 800040a:	b082      	sub	sp, #8
 800040c:	af02      	add	r7, sp, #8
	ILI9431_set_gpio();
 800040e:	f7ff fee5 	bl	80001dc <ILI9431_set_gpio>
	ILI9431_reset();
 8000412:	f7ff ff13 	bl	800023c <ILI9431_reset>
	ILI9431_write_reg(0xCF);
 8000416:	20cf      	movs	r0, #207	; 0xcf
 8000418:	f7ff ff22 	bl	8000260 <ILI9431_write_reg>
	ILI9431_write_data(0x00);
 800041c:	2000      	movs	r0, #0
 800041e:	f7ff ff3f 	bl	80002a0 <ILI9431_write_data>
	ILI9431_write_data(0xC1);
 8000422:	20c1      	movs	r0, #193	; 0xc1
 8000424:	f7ff ff3c 	bl	80002a0 <ILI9431_write_data>
	ILI9431_write_data(0X30);
 8000428:	2030      	movs	r0, #48	; 0x30
 800042a:	f7ff ff39 	bl	80002a0 <ILI9431_write_data>
	ILI9431_write_reg(0xED);
 800042e:	20ed      	movs	r0, #237	; 0xed
 8000430:	f7ff ff16 	bl	8000260 <ILI9431_write_reg>
	ILI9431_write_data(0x64);
 8000434:	2064      	movs	r0, #100	; 0x64
 8000436:	f7ff ff33 	bl	80002a0 <ILI9431_write_data>
	ILI9431_write_data(0x03);
 800043a:	2003      	movs	r0, #3
 800043c:	f7ff ff30 	bl	80002a0 <ILI9431_write_data>
	ILI9431_write_data(0X12);
 8000440:	2012      	movs	r0, #18
 8000442:	f7ff ff2d 	bl	80002a0 <ILI9431_write_data>
	ILI9431_write_data(0X81);
 8000446:	2081      	movs	r0, #129	; 0x81
 8000448:	f7ff ff2a 	bl	80002a0 <ILI9431_write_data>
	ILI9431_write_reg(0xE8);
 800044c:	20e8      	movs	r0, #232	; 0xe8
 800044e:	f7ff ff07 	bl	8000260 <ILI9431_write_reg>
	ILI9431_write_data(0x85);
 8000452:	2085      	movs	r0, #133	; 0x85
 8000454:	f7ff ff24 	bl	80002a0 <ILI9431_write_data>
	ILI9431_write_data(0x10);
 8000458:	2010      	movs	r0, #16
 800045a:	f7ff ff21 	bl	80002a0 <ILI9431_write_data>
	ILI9431_write_data(0x7A);
 800045e:	207a      	movs	r0, #122	; 0x7a
 8000460:	f7ff ff1e 	bl	80002a0 <ILI9431_write_data>
	ILI9431_write_reg(0xCB);
 8000464:	20cb      	movs	r0, #203	; 0xcb
 8000466:	f7ff fefb 	bl	8000260 <ILI9431_write_reg>
	ILI9431_write_data(0x39);
 800046a:	2039      	movs	r0, #57	; 0x39
 800046c:	f7ff ff18 	bl	80002a0 <ILI9431_write_data>
	ILI9431_write_data(0x2C);
 8000470:	202c      	movs	r0, #44	; 0x2c
 8000472:	f7ff ff15 	bl	80002a0 <ILI9431_write_data>
	ILI9431_write_data(0x00);
 8000476:	2000      	movs	r0, #0
 8000478:	f7ff ff12 	bl	80002a0 <ILI9431_write_data>
	ILI9431_write_data(0x34);
 800047c:	2034      	movs	r0, #52	; 0x34
 800047e:	f7ff ff0f 	bl	80002a0 <ILI9431_write_data>
	ILI9431_write_data(0x02);
 8000482:	2002      	movs	r0, #2
 8000484:	f7ff ff0c 	bl	80002a0 <ILI9431_write_data>
	ILI9431_write_reg(0xF7);
 8000488:	20f7      	movs	r0, #247	; 0xf7
 800048a:	f7ff fee9 	bl	8000260 <ILI9431_write_reg>
	ILI9431_write_data(0x20);
 800048e:	2020      	movs	r0, #32
 8000490:	f7ff ff06 	bl	80002a0 <ILI9431_write_data>
	ILI9431_write_reg(0xEA);
 8000494:	20ea      	movs	r0, #234	; 0xea
 8000496:	f7ff fee3 	bl	8000260 <ILI9431_write_reg>
	ILI9431_write_data(0x00);
 800049a:	2000      	movs	r0, #0
 800049c:	f7ff ff00 	bl	80002a0 <ILI9431_write_data>
	ILI9431_write_data(0x00);
 80004a0:	2000      	movs	r0, #0
 80004a2:	f7ff fefd 	bl	80002a0 <ILI9431_write_data>
	ILI9431_write_reg(0xC0);    //Power control
 80004a6:	20c0      	movs	r0, #192	; 0xc0
 80004a8:	f7ff feda 	bl	8000260 <ILI9431_write_reg>
	ILI9431_write_data(0x1B);   //VRH[5:0]
 80004ac:	201b      	movs	r0, #27
 80004ae:	f7ff fef7 	bl	80002a0 <ILI9431_write_data>
	ILI9431_write_reg(0xC1);    //Power control
 80004b2:	20c1      	movs	r0, #193	; 0xc1
 80004b4:	f7ff fed4 	bl	8000260 <ILI9431_write_reg>
	ILI9431_write_data(0x01);   //SAP[2:0];BT[3:0]
 80004b8:	2001      	movs	r0, #1
 80004ba:	f7ff fef1 	bl	80002a0 <ILI9431_write_data>
	ILI9431_write_reg(0xC5);    //VCM control
 80004be:	20c5      	movs	r0, #197	; 0xc5
 80004c0:	f7ff fece 	bl	8000260 <ILI9431_write_reg>
	ILI9431_write_data(0x30); 	 //3F
 80004c4:	2030      	movs	r0, #48	; 0x30
 80004c6:	f7ff feeb 	bl	80002a0 <ILI9431_write_data>
	ILI9431_write_data(0x30); 	 //3C
 80004ca:	2030      	movs	r0, #48	; 0x30
 80004cc:	f7ff fee8 	bl	80002a0 <ILI9431_write_data>
	ILI9431_write_reg(0xC7);    //VCM control2
 80004d0:	20c7      	movs	r0, #199	; 0xc7
 80004d2:	f7ff fec5 	bl	8000260 <ILI9431_write_reg>
	ILI9431_write_data(0XB7);
 80004d6:	20b7      	movs	r0, #183	; 0xb7
 80004d8:	f7ff fee2 	bl	80002a0 <ILI9431_write_data>
	ILI9431_write_reg(0x36);    // Memory Access Control
 80004dc:	2036      	movs	r0, #54	; 0x36
 80004de:	f7ff febf 	bl	8000260 <ILI9431_write_reg>
	ILI9431_write_data(0x48);
 80004e2:	2048      	movs	r0, #72	; 0x48
 80004e4:	f7ff fedc 	bl	80002a0 <ILI9431_write_data>
	ILI9431_write_reg(0x3A);
 80004e8:	203a      	movs	r0, #58	; 0x3a
 80004ea:	f7ff feb9 	bl	8000260 <ILI9431_write_reg>
	ILI9431_write_data(0x55);
 80004ee:	2055      	movs	r0, #85	; 0x55
 80004f0:	f7ff fed6 	bl	80002a0 <ILI9431_write_data>
	ILI9431_write_reg(0xB1);
 80004f4:	20b1      	movs	r0, #177	; 0xb1
 80004f6:	f7ff feb3 	bl	8000260 <ILI9431_write_reg>
	ILI9431_write_data(0x00);
 80004fa:	2000      	movs	r0, #0
 80004fc:	f7ff fed0 	bl	80002a0 <ILI9431_write_data>
	ILI9431_write_data(0x1A);
 8000500:	201a      	movs	r0, #26
 8000502:	f7ff fecd 	bl	80002a0 <ILI9431_write_data>
	ILI9431_write_reg(0xB6);    // Display Function Control
 8000506:	20b6      	movs	r0, #182	; 0xb6
 8000508:	f7ff feaa 	bl	8000260 <ILI9431_write_reg>
	ILI9431_write_data(0x0A);
 800050c:	200a      	movs	r0, #10
 800050e:	f7ff fec7 	bl	80002a0 <ILI9431_write_data>
	ILI9431_write_data(0xA2);
 8000512:	20a2      	movs	r0, #162	; 0xa2
 8000514:	f7ff fec4 	bl	80002a0 <ILI9431_write_data>
	ILI9431_write_reg(0xF2);    // 3Gamma Function Disable
 8000518:	20f2      	movs	r0, #242	; 0xf2
 800051a:	f7ff fea1 	bl	8000260 <ILI9431_write_reg>
	ILI9431_write_data(0x00);
 800051e:	2000      	movs	r0, #0
 8000520:	f7ff febe 	bl	80002a0 <ILI9431_write_data>
	ILI9431_write_reg(0x26);    //Gamma curve selected
 8000524:	2026      	movs	r0, #38	; 0x26
 8000526:	f7ff fe9b 	bl	8000260 <ILI9431_write_reg>
	ILI9431_write_data(0x01);
 800052a:	2001      	movs	r0, #1
 800052c:	f7ff feb8 	bl	80002a0 <ILI9431_write_data>
	ILI9431_write_reg(0xE0);    //Set Gamma
 8000530:	20e0      	movs	r0, #224	; 0xe0
 8000532:	f7ff fe95 	bl	8000260 <ILI9431_write_reg>
	ILI9431_write_data(0x0F);
 8000536:	200f      	movs	r0, #15
 8000538:	f7ff feb2 	bl	80002a0 <ILI9431_write_data>
	ILI9431_write_data(0x2A);
 800053c:	202a      	movs	r0, #42	; 0x2a
 800053e:	f7ff feaf 	bl	80002a0 <ILI9431_write_data>
	ILI9431_write_data(0x28);
 8000542:	2028      	movs	r0, #40	; 0x28
 8000544:	f7ff feac 	bl	80002a0 <ILI9431_write_data>
	ILI9431_write_data(0x08);
 8000548:	2008      	movs	r0, #8
 800054a:	f7ff fea9 	bl	80002a0 <ILI9431_write_data>
	ILI9431_write_data(0x0E);
 800054e:	200e      	movs	r0, #14
 8000550:	f7ff fea6 	bl	80002a0 <ILI9431_write_data>
	ILI9431_write_data(0x08);
 8000554:	2008      	movs	r0, #8
 8000556:	f7ff fea3 	bl	80002a0 <ILI9431_write_data>
	ILI9431_write_data(0x54);
 800055a:	2054      	movs	r0, #84	; 0x54
 800055c:	f7ff fea0 	bl	80002a0 <ILI9431_write_data>
	ILI9431_write_data(0XA9);
 8000560:	20a9      	movs	r0, #169	; 0xa9
 8000562:	f7ff fe9d 	bl	80002a0 <ILI9431_write_data>
	ILI9431_write_data(0x43);
 8000566:	2043      	movs	r0, #67	; 0x43
 8000568:	f7ff fe9a 	bl	80002a0 <ILI9431_write_data>
	ILI9431_write_data(0x0A);
 800056c:	200a      	movs	r0, #10
 800056e:	f7ff fe97 	bl	80002a0 <ILI9431_write_data>
	ILI9431_write_data(0x0F);
 8000572:	200f      	movs	r0, #15
 8000574:	f7ff fe94 	bl	80002a0 <ILI9431_write_data>
	ILI9431_write_data(0x00);
 8000578:	2000      	movs	r0, #0
 800057a:	f7ff fe91 	bl	80002a0 <ILI9431_write_data>
	ILI9431_write_data(0x00);
 800057e:	2000      	movs	r0, #0
 8000580:	f7ff fe8e 	bl	80002a0 <ILI9431_write_data>
	ILI9431_write_data(0x00);
 8000584:	2000      	movs	r0, #0
 8000586:	f7ff fe8b 	bl	80002a0 <ILI9431_write_data>
	ILI9431_write_data(0x00);
 800058a:	2000      	movs	r0, #0
 800058c:	f7ff fe88 	bl	80002a0 <ILI9431_write_data>
	ILI9431_write_reg(0XE1);    //Set Gamma
 8000590:	20e1      	movs	r0, #225	; 0xe1
 8000592:	f7ff fe65 	bl	8000260 <ILI9431_write_reg>
	ILI9431_write_data(0x00);
 8000596:	2000      	movs	r0, #0
 8000598:	f7ff fe82 	bl	80002a0 <ILI9431_write_data>
	ILI9431_write_data(0x15);
 800059c:	2015      	movs	r0, #21
 800059e:	f7ff fe7f 	bl	80002a0 <ILI9431_write_data>
	ILI9431_write_data(0x17);
 80005a2:	2017      	movs	r0, #23
 80005a4:	f7ff fe7c 	bl	80002a0 <ILI9431_write_data>
	ILI9431_write_data(0x07);
 80005a8:	2007      	movs	r0, #7
 80005aa:	f7ff fe79 	bl	80002a0 <ILI9431_write_data>
	ILI9431_write_data(0x11);
 80005ae:	2011      	movs	r0, #17
 80005b0:	f7ff fe76 	bl	80002a0 <ILI9431_write_data>
	ILI9431_write_data(0x06);
 80005b4:	2006      	movs	r0, #6
 80005b6:	f7ff fe73 	bl	80002a0 <ILI9431_write_data>
	ILI9431_write_data(0x2B);
 80005ba:	202b      	movs	r0, #43	; 0x2b
 80005bc:	f7ff fe70 	bl	80002a0 <ILI9431_write_data>
	ILI9431_write_data(0x56);
 80005c0:	2056      	movs	r0, #86	; 0x56
 80005c2:	f7ff fe6d 	bl	80002a0 <ILI9431_write_data>
	ILI9431_write_data(0x3C);
 80005c6:	203c      	movs	r0, #60	; 0x3c
 80005c8:	f7ff fe6a 	bl	80002a0 <ILI9431_write_data>
	ILI9431_write_data(0x05);
 80005cc:	2005      	movs	r0, #5
 80005ce:	f7ff fe67 	bl	80002a0 <ILI9431_write_data>
	ILI9431_write_data(0x10);
 80005d2:	2010      	movs	r0, #16
 80005d4:	f7ff fe64 	bl	80002a0 <ILI9431_write_data>
	ILI9431_write_data(0x0F);
 80005d8:	200f      	movs	r0, #15
 80005da:	f7ff fe61 	bl	80002a0 <ILI9431_write_data>
	ILI9431_write_data(0x3F);
 80005de:	203f      	movs	r0, #63	; 0x3f
 80005e0:	f7ff fe5e 	bl	80002a0 <ILI9431_write_data>
	ILI9431_write_data(0x3F);
 80005e4:	203f      	movs	r0, #63	; 0x3f
 80005e6:	f7ff fe5b 	bl	80002a0 <ILI9431_write_data>
	ILI9431_write_data(0x0F);
 80005ea:	200f      	movs	r0, #15
 80005ec:	f7ff fe58 	bl	80002a0 <ILI9431_write_data>
	ILI9431_write_reg(0x2B);
 80005f0:	202b      	movs	r0, #43	; 0x2b
 80005f2:	f7ff fe35 	bl	8000260 <ILI9431_write_reg>
	ILI9431_write_data(0x00);
 80005f6:	2000      	movs	r0, #0
 80005f8:	f7ff fe52 	bl	80002a0 <ILI9431_write_data>
	ILI9431_write_data(0x00);
 80005fc:	2000      	movs	r0, #0
 80005fe:	f7ff fe4f 	bl	80002a0 <ILI9431_write_data>
	ILI9431_write_data(0x01);
 8000602:	2001      	movs	r0, #1
 8000604:	f7ff fe4c 	bl	80002a0 <ILI9431_write_data>
	ILI9431_write_data(0x3f);
 8000608:	203f      	movs	r0, #63	; 0x3f
 800060a:	f7ff fe49 	bl	80002a0 <ILI9431_write_data>
	ILI9431_write_reg(0x2A);
 800060e:	202a      	movs	r0, #42	; 0x2a
 8000610:	f7ff fe26 	bl	8000260 <ILI9431_write_reg>
	ILI9431_write_data(0x00);
 8000614:	2000      	movs	r0, #0
 8000616:	f7ff fe43 	bl	80002a0 <ILI9431_write_data>
	ILI9431_write_data(0x00);
 800061a:	2000      	movs	r0, #0
 800061c:	f7ff fe40 	bl	80002a0 <ILI9431_write_data>
	ILI9431_write_data(0x00);
 8000620:	2000      	movs	r0, #0
 8000622:	f7ff fe3d 	bl	80002a0 <ILI9431_write_data>
	ILI9431_write_data(0xef);
 8000626:	20ef      	movs	r0, #239	; 0xef
 8000628:	f7ff fe3a 	bl	80002a0 <ILI9431_write_data>
	ILI9431_write_reg(0x11); //Exit Sleep
 800062c:	2011      	movs	r0, #17
 800062e:	f7ff fe17 	bl	8000260 <ILI9431_write_reg>
	Delay_ms(120);
 8000632:	2078      	movs	r0, #120	; 0x78
 8000634:	f000 f89c 	bl	8000770 <TIMEOUT_delay_ms>
	ILI9431_write_reg(0x29); //display on
 8000638:	2029      	movs	r0, #41	; 0x29
 800063a:	f7ff fe11 	bl	8000260 <ILI9431_write_reg>

	ILI9431_set_param();//����LCD����
 800063e:	f7ff fec5 	bl	80003cc <ILI9431_set_param>
	ON_DISPLAY;//????
 8000642:	4b08      	ldr	r3, [pc, #32]	; (8000664 <ILI9431_init+0x25c>)
 8000644:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000648:	611a      	str	r2, [r3, #16]
	DISPLAY_scr_fill(0, 0, 320, 240, 0xFFFF);
 800064a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800064e:	9300      	str	r3, [sp, #0]
 8000650:	23f0      	movs	r3, #240	; 0xf0
 8000652:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8000656:	2100      	movs	r1, #0
 8000658:	2000      	movs	r0, #0
 800065a:	f7ff fd86 	bl	800016a <DISPLAY_scr_fill>
}
 800065e:	bf00      	nop
 8000660:	46bd      	mov	sp, r7
 8000662:	bd80      	pop	{r7, pc}
 8000664:	40010c00 	.word	0x40010c00

08000668 <PROCESS_init>:
{

}

void PROCESS_init(void)
{
 8000668:	b580      	push	{r7, lr}
 800066a:	b082      	sub	sp, #8
 800066c:	af02      	add	r7, sp, #8
//	TIMEOUT_init();
	ILI9431_init();
 800066e:	f7ff fecb 	bl	8000408 <ILI9431_init>

	LED.time_start = TIMEOUT_gettick_ms();
 8000672:	f000 f873 	bl	800075c <TIMEOUT_gettick_ms>
 8000676:	4602      	mov	r2, r0
 8000678:	4b0f      	ldr	r3, [pc, #60]	; (80006b8 <PROCESS_init+0x50>)
 800067a:	601a      	str	r2, [r3, #0]
	LED.time_cycle = 1000;
 800067c:	4b0e      	ldr	r3, [pc, #56]	; (80006b8 <PROCESS_init+0x50>)
 800067e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000682:	605a      	str	r2, [r3, #4]

	xTaskCreate(LCD0_Task, (const char *)"LCD0", 128, NULL, tskIDLE_PRIORITY, NULL);
 8000684:	2300      	movs	r3, #0
 8000686:	9301      	str	r3, [sp, #4]
 8000688:	2300      	movs	r3, #0
 800068a:	9300      	str	r3, [sp, #0]
 800068c:	2300      	movs	r3, #0
 800068e:	2280      	movs	r2, #128	; 0x80
 8000690:	490a      	ldr	r1, [pc, #40]	; (80006bc <PROCESS_init+0x54>)
 8000692:	480b      	ldr	r0, [pc, #44]	; (80006c0 <PROCESS_init+0x58>)
 8000694:	f000 f932 	bl	80008fc <xTaskCreate>
	xTaskCreate(LCD1_Task, (const char *)"LCD1", configMINIMAL_STACK_SIZE, NULL, tskIDLE_PRIORITY + 4, NULL);
 8000698:	2300      	movs	r3, #0
 800069a:	9301      	str	r3, [sp, #4]
 800069c:	2304      	movs	r3, #4
 800069e:	9300      	str	r3, [sp, #0]
 80006a0:	2300      	movs	r3, #0
 80006a2:	2280      	movs	r2, #128	; 0x80
 80006a4:	4907      	ldr	r1, [pc, #28]	; (80006c4 <PROCESS_init+0x5c>)
 80006a6:	4808      	ldr	r0, [pc, #32]	; (80006c8 <PROCESS_init+0x60>)
 80006a8:	f000 f928 	bl	80008fc <xTaskCreate>

	vTaskStartScheduler();
 80006ac:	f000 fa66 	bl	8000b7c <vTaskStartScheduler>
}
 80006b0:	bf00      	nop
 80006b2:	46bd      	mov	sp, r7
 80006b4:	bd80      	pop	{r7, pc}
 80006b6:	bf00      	nop
 80006b8:	200017a0 	.word	0x200017a0
 80006bc:	0800197c 	.word	0x0800197c
 80006c0:	0800073d 	.word	0x0800073d
 80006c4:	08001984 	.word	0x08001984
 80006c8:	0800074b 	.word	0x0800074b

080006cc <PROCESS_led>:

void PROCESS_led(void)
{
 80006cc:	b580      	push	{r7, lr}
 80006ce:	b082      	sub	sp, #8
 80006d0:	af02      	add	r7, sp, #8
	static uint8_t a = 0;
    if(TIMEOUT_gettick_ms() - LED.time_start > LED.time_cycle)
 80006d2:	f000 f843 	bl	800075c <TIMEOUT_gettick_ms>
 80006d6:	4602      	mov	r2, r0
 80006d8:	4b16      	ldr	r3, [pc, #88]	; (8000734 <PROCESS_led+0x68>)
 80006da:	681b      	ldr	r3, [r3, #0]
 80006dc:	1ad2      	subs	r2, r2, r3
 80006de:	4b15      	ldr	r3, [pc, #84]	; (8000734 <PROCESS_led+0x68>)
 80006e0:	685b      	ldr	r3, [r3, #4]
 80006e2:	429a      	cmp	r2, r3
 80006e4:	d922      	bls.n	800072c <PROCESS_led+0x60>
    {
    	LED.time_start = TIMEOUT_gettick_ms();
 80006e6:	f000 f839 	bl	800075c <TIMEOUT_gettick_ms>
 80006ea:	4602      	mov	r2, r0
 80006ec:	4b11      	ldr	r3, [pc, #68]	; (8000734 <PROCESS_led+0x68>)
 80006ee:	601a      	str	r2, [r3, #0]
    	if(a == 0)
 80006f0:	4b11      	ldr	r3, [pc, #68]	; (8000738 <PROCESS_led+0x6c>)
 80006f2:	781b      	ldrb	r3, [r3, #0]
 80006f4:	2b00      	cmp	r3, #0
 80006f6:	d10c      	bne.n	8000712 <PROCESS_led+0x46>
		{
    		a = 1;
 80006f8:	4b0f      	ldr	r3, [pc, #60]	; (8000738 <PROCESS_led+0x6c>)
 80006fa:	2201      	movs	r2, #1
 80006fc:	701a      	strb	r2, [r3, #0]
			DISPLAY_scr_fill(0, 0, 320, 240, 0x0000);
 80006fe:	2300      	movs	r3, #0
 8000700:	9300      	str	r3, [sp, #0]
 8000702:	23f0      	movs	r3, #240	; 0xf0
 8000704:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8000708:	2100      	movs	r1, #0
 800070a:	2000      	movs	r0, #0
 800070c:	f7ff fd2d 	bl	800016a <DISPLAY_scr_fill>
    	{
    		a = 0;
    		DISPLAY_scr_fill(0, 0, 320, 240, 0x21a7);
    	}
    }
}
 8000710:	e00c      	b.n	800072c <PROCESS_led+0x60>
    		a = 0;
 8000712:	4b09      	ldr	r3, [pc, #36]	; (8000738 <PROCESS_led+0x6c>)
 8000714:	2200      	movs	r2, #0
 8000716:	701a      	strb	r2, [r3, #0]
    		DISPLAY_scr_fill(0, 0, 320, 240, 0x21a7);
 8000718:	f242 13a7 	movw	r3, #8615	; 0x21a7
 800071c:	9300      	str	r3, [sp, #0]
 800071e:	23f0      	movs	r3, #240	; 0xf0
 8000720:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8000724:	2100      	movs	r1, #0
 8000726:	2000      	movs	r0, #0
 8000728:	f7ff fd1f 	bl	800016a <DISPLAY_scr_fill>
}
 800072c:	bf00      	nop
 800072e:	46bd      	mov	sp, r7
 8000730:	bd80      	pop	{r7, pc}
 8000732:	bf00      	nop
 8000734:	200017a0 	.word	0x200017a0
 8000738:	20000024 	.word	0x20000024

0800073c <LCD0_Task>:
}



void LCD0_Task(void * pvParameters)
{
 800073c:	b580      	push	{r7, lr}
 800073e:	b082      	sub	sp, #8
 8000740:	af00      	add	r7, sp, #0
 8000742:	6078      	str	r0, [r7, #4]
	while (1)
	{
		PROCESS_led();
 8000744:	f7ff ffc2 	bl	80006cc <PROCESS_led>
 8000748:	e7fc      	b.n	8000744 <LCD0_Task+0x8>

0800074a <LCD1_Task>:
	}
}

void LCD1_Task(void * pvParameters)
{
 800074a:	b580      	push	{r7, lr}
 800074c:	b082      	sub	sp, #8
 800074e:	af00      	add	r7, sp, #0
 8000750:	6078      	str	r0, [r7, #4]
	while (1)
	{
//		DISPLAY_scr_fill(0, 0, 320, 240, 0x21a7);
		vTaskDelay(1500/ portTICK_RATE_MS);
 8000752:	f240 50dc 	movw	r0, #1500	; 0x5dc
 8000756:	f000 f9ed 	bl	8000b34 <vTaskDelay>
 800075a:	e7fa      	b.n	8000752 <LCD1_Task+0x8>

0800075c <TIMEOUT_gettick_ms>:
        }
    }
}

uint32_t TIMEOUT_gettick_ms(void)
{
 800075c:	b480      	push	{r7}
 800075e:	af00      	add	r7, sp, #0
    return TIMEOUT.tick_ms.count_tick;
 8000760:	4b02      	ldr	r3, [pc, #8]	; (800076c <TIMEOUT_gettick_ms+0x10>)
 8000762:	681b      	ldr	r3, [r3, #0]
}
 8000764:	4618      	mov	r0, r3
 8000766:	46bd      	mov	sp, r7
 8000768:	bc80      	pop	{r7}
 800076a:	4770      	bx	lr
 800076c:	20000028 	.word	0x20000028

08000770 <TIMEOUT_delay_ms>:
    uint32_t index;
    for(index = 0; index < 4*num; index++);
}

void TIMEOUT_delay_ms( uint32_t num)
{
 8000770:	b480      	push	{r7}
 8000772:	b085      	sub	sp, #20
 8000774:	af00      	add	r7, sp, #0
 8000776:	6078      	str	r0, [r7, #4]
    uint32_t index;
    for(index = 0; index < 4240*num; index++);
 8000778:	2300      	movs	r3, #0
 800077a:	60fb      	str	r3, [r7, #12]
 800077c:	e002      	b.n	8000784 <TIMEOUT_delay_ms+0x14>
 800077e:	68fb      	ldr	r3, [r7, #12]
 8000780:	3301      	adds	r3, #1
 8000782:	60fb      	str	r3, [r7, #12]
 8000784:	687b      	ldr	r3, [r7, #4]
 8000786:	f241 0290 	movw	r2, #4240	; 0x1090
 800078a:	fb02 f303 	mul.w	r3, r2, r3
 800078e:	68fa      	ldr	r2, [r7, #12]
 8000790:	429a      	cmp	r2, r3
 8000792:	d3f4      	bcc.n	800077e <TIMEOUT_delay_ms+0xe>
}
 8000794:	bf00      	nop
 8000796:	3714      	adds	r7, #20
 8000798:	46bd      	mov	sp, r7
 800079a:	bc80      	pop	{r7}
 800079c:	4770      	bx	lr

0800079e <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800079e:	b480      	push	{r7}
 80007a0:	b083      	sub	sp, #12
 80007a2:	af00      	add	r7, sp, #0
 80007a4:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80007a6:	687b      	ldr	r3, [r7, #4]
 80007a8:	f103 0208 	add.w	r2, r3, #8
 80007ac:	687b      	ldr	r3, [r7, #4]
 80007ae:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80007b0:	687b      	ldr	r3, [r7, #4]
 80007b2:	f04f 32ff 	mov.w	r2, #4294967295
 80007b6:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80007b8:	687b      	ldr	r3, [r7, #4]
 80007ba:	f103 0208 	add.w	r2, r3, #8
 80007be:	687b      	ldr	r3, [r7, #4]
 80007c0:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80007c2:	687b      	ldr	r3, [r7, #4]
 80007c4:	f103 0208 	add.w	r2, r3, #8
 80007c8:	687b      	ldr	r3, [r7, #4]
 80007ca:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80007cc:	687b      	ldr	r3, [r7, #4]
 80007ce:	2200      	movs	r2, #0
 80007d0:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80007d2:	bf00      	nop
 80007d4:	370c      	adds	r7, #12
 80007d6:	46bd      	mov	sp, r7
 80007d8:	bc80      	pop	{r7}
 80007da:	4770      	bx	lr

080007dc <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80007dc:	b480      	push	{r7}
 80007de:	b083      	sub	sp, #12
 80007e0:	af00      	add	r7, sp, #0
 80007e2:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 80007e4:	687b      	ldr	r3, [r7, #4]
 80007e6:	2200      	movs	r2, #0
 80007e8:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80007ea:	bf00      	nop
 80007ec:	370c      	adds	r7, #12
 80007ee:	46bd      	mov	sp, r7
 80007f0:	bc80      	pop	{r7}
 80007f2:	4770      	bx	lr

080007f4 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80007f4:	b480      	push	{r7}
 80007f6:	b085      	sub	sp, #20
 80007f8:	af00      	add	r7, sp, #0
 80007fa:	6078      	str	r0, [r7, #4]
 80007fc:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80007fe:	687b      	ldr	r3, [r7, #4]
 8000800:	685b      	ldr	r3, [r3, #4]
 8000802:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8000804:	683b      	ldr	r3, [r7, #0]
 8000806:	68fa      	ldr	r2, [r7, #12]
 8000808:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800080a:	68fb      	ldr	r3, [r7, #12]
 800080c:	689a      	ldr	r2, [r3, #8]
 800080e:	683b      	ldr	r3, [r7, #0]
 8000810:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8000812:	68fb      	ldr	r3, [r7, #12]
 8000814:	689b      	ldr	r3, [r3, #8]
 8000816:	683a      	ldr	r2, [r7, #0]
 8000818:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800081a:	68fb      	ldr	r3, [r7, #12]
 800081c:	683a      	ldr	r2, [r7, #0]
 800081e:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8000820:	683b      	ldr	r3, [r7, #0]
 8000822:	687a      	ldr	r2, [r7, #4]
 8000824:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8000826:	687b      	ldr	r3, [r7, #4]
 8000828:	681b      	ldr	r3, [r3, #0]
 800082a:	1c5a      	adds	r2, r3, #1
 800082c:	687b      	ldr	r3, [r7, #4]
 800082e:	601a      	str	r2, [r3, #0]
}
 8000830:	bf00      	nop
 8000832:	3714      	adds	r7, #20
 8000834:	46bd      	mov	sp, r7
 8000836:	bc80      	pop	{r7}
 8000838:	4770      	bx	lr

0800083a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800083a:	b480      	push	{r7}
 800083c:	b085      	sub	sp, #20
 800083e:	af00      	add	r7, sp, #0
 8000840:	6078      	str	r0, [r7, #4]
 8000842:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8000844:	683b      	ldr	r3, [r7, #0]
 8000846:	681b      	ldr	r3, [r3, #0]
 8000848:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800084a:	68bb      	ldr	r3, [r7, #8]
 800084c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000850:	d103      	bne.n	800085a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8000852:	687b      	ldr	r3, [r7, #4]
 8000854:	691b      	ldr	r3, [r3, #16]
 8000856:	60fb      	str	r3, [r7, #12]
 8000858:	e00c      	b.n	8000874 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800085a:	687b      	ldr	r3, [r7, #4]
 800085c:	3308      	adds	r3, #8
 800085e:	60fb      	str	r3, [r7, #12]
 8000860:	e002      	b.n	8000868 <vListInsert+0x2e>
 8000862:	68fb      	ldr	r3, [r7, #12]
 8000864:	685b      	ldr	r3, [r3, #4]
 8000866:	60fb      	str	r3, [r7, #12]
 8000868:	68fb      	ldr	r3, [r7, #12]
 800086a:	685b      	ldr	r3, [r3, #4]
 800086c:	681b      	ldr	r3, [r3, #0]
 800086e:	68ba      	ldr	r2, [r7, #8]
 8000870:	429a      	cmp	r2, r3
 8000872:	d2f6      	bcs.n	8000862 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8000874:	68fb      	ldr	r3, [r7, #12]
 8000876:	685a      	ldr	r2, [r3, #4]
 8000878:	683b      	ldr	r3, [r7, #0]
 800087a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800087c:	683b      	ldr	r3, [r7, #0]
 800087e:	685b      	ldr	r3, [r3, #4]
 8000880:	683a      	ldr	r2, [r7, #0]
 8000882:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8000884:	683b      	ldr	r3, [r7, #0]
 8000886:	68fa      	ldr	r2, [r7, #12]
 8000888:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800088a:	68fb      	ldr	r3, [r7, #12]
 800088c:	683a      	ldr	r2, [r7, #0]
 800088e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8000890:	683b      	ldr	r3, [r7, #0]
 8000892:	687a      	ldr	r2, [r7, #4]
 8000894:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8000896:	687b      	ldr	r3, [r7, #4]
 8000898:	681b      	ldr	r3, [r3, #0]
 800089a:	1c5a      	adds	r2, r3, #1
 800089c:	687b      	ldr	r3, [r7, #4]
 800089e:	601a      	str	r2, [r3, #0]
}
 80008a0:	bf00      	nop
 80008a2:	3714      	adds	r7, #20
 80008a4:	46bd      	mov	sp, r7
 80008a6:	bc80      	pop	{r7}
 80008a8:	4770      	bx	lr

080008aa <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80008aa:	b480      	push	{r7}
 80008ac:	b085      	sub	sp, #20
 80008ae:	af00      	add	r7, sp, #0
 80008b0:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 80008b2:	687b      	ldr	r3, [r7, #4]
 80008b4:	691b      	ldr	r3, [r3, #16]
 80008b6:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80008b8:	687b      	ldr	r3, [r7, #4]
 80008ba:	685b      	ldr	r3, [r3, #4]
 80008bc:	687a      	ldr	r2, [r7, #4]
 80008be:	6892      	ldr	r2, [r2, #8]
 80008c0:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80008c2:	687b      	ldr	r3, [r7, #4]
 80008c4:	689b      	ldr	r3, [r3, #8]
 80008c6:	687a      	ldr	r2, [r7, #4]
 80008c8:	6852      	ldr	r2, [r2, #4]
 80008ca:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80008cc:	68fb      	ldr	r3, [r7, #12]
 80008ce:	685b      	ldr	r3, [r3, #4]
 80008d0:	687a      	ldr	r2, [r7, #4]
 80008d2:	429a      	cmp	r2, r3
 80008d4:	d103      	bne.n	80008de <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80008d6:	687b      	ldr	r3, [r7, #4]
 80008d8:	689a      	ldr	r2, [r3, #8]
 80008da:	68fb      	ldr	r3, [r7, #12]
 80008dc:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 80008de:	687b      	ldr	r3, [r7, #4]
 80008e0:	2200      	movs	r2, #0
 80008e2:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80008e4:	68fb      	ldr	r3, [r7, #12]
 80008e6:	681b      	ldr	r3, [r3, #0]
 80008e8:	1e5a      	subs	r2, r3, #1
 80008ea:	68fb      	ldr	r3, [r7, #12]
 80008ec:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80008ee:	68fb      	ldr	r3, [r7, #12]
 80008f0:	681b      	ldr	r3, [r3, #0]
}
 80008f2:	4618      	mov	r0, r3
 80008f4:	3714      	adds	r7, #20
 80008f6:	46bd      	mov	sp, r7
 80008f8:	bc80      	pop	{r7}
 80008fa:	4770      	bx	lr

080008fc <xTaskCreate>:
							const char * const pcName,
							const uint16_t usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80008fc:	b580      	push	{r7, lr}
 80008fe:	b08c      	sub	sp, #48	; 0x30
 8000900:	af04      	add	r7, sp, #16
 8000902:	60f8      	str	r0, [r7, #12]
 8000904:	60b9      	str	r1, [r7, #8]
 8000906:	603b      	str	r3, [r7, #0]
 8000908:	4613      	mov	r3, r2
 800090a:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800090c:	88fb      	ldrh	r3, [r7, #6]
 800090e:	009b      	lsls	r3, r3, #2
 8000910:	4618      	mov	r0, r3
 8000912:	f000 fd23 	bl	800135c <pvPortMalloc>
 8000916:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8000918:	697b      	ldr	r3, [r7, #20]
 800091a:	2b00      	cmp	r3, #0
 800091c:	d00e      	beq.n	800093c <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 800091e:	2054      	movs	r0, #84	; 0x54
 8000920:	f000 fd1c 	bl	800135c <pvPortMalloc>
 8000924:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8000926:	69fb      	ldr	r3, [r7, #28]
 8000928:	2b00      	cmp	r3, #0
 800092a:	d003      	beq.n	8000934 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800092c:	69fb      	ldr	r3, [r7, #28]
 800092e:	697a      	ldr	r2, [r7, #20]
 8000930:	631a      	str	r2, [r3, #48]	; 0x30
 8000932:	e005      	b.n	8000940 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8000934:	6978      	ldr	r0, [r7, #20]
 8000936:	f000 fd9f 	bl	8001478 <vPortFree>
 800093a:	e001      	b.n	8000940 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800093c:	2300      	movs	r3, #0
 800093e:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8000940:	69fb      	ldr	r3, [r7, #28]
 8000942:	2b00      	cmp	r3, #0
 8000944:	d013      	beq.n	800096e <xTaskCreate+0x72>
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8000946:	88fa      	ldrh	r2, [r7, #6]
 8000948:	2300      	movs	r3, #0
 800094a:	9303      	str	r3, [sp, #12]
 800094c:	69fb      	ldr	r3, [r7, #28]
 800094e:	9302      	str	r3, [sp, #8]
 8000950:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000952:	9301      	str	r3, [sp, #4]
 8000954:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000956:	9300      	str	r3, [sp, #0]
 8000958:	683b      	ldr	r3, [r7, #0]
 800095a:	68b9      	ldr	r1, [r7, #8]
 800095c:	68f8      	ldr	r0, [r7, #12]
 800095e:	f000 f80e 	bl	800097e <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8000962:	69f8      	ldr	r0, [r7, #28]
 8000964:	f000 f87a 	bl	8000a5c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8000968:	2301      	movs	r3, #1
 800096a:	61bb      	str	r3, [r7, #24]
 800096c:	e002      	b.n	8000974 <xTaskCreate+0x78>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800096e:	f04f 33ff 	mov.w	r3, #4294967295
 8000972:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8000974:	69bb      	ldr	r3, [r7, #24]
	}
 8000976:	4618      	mov	r0, r3
 8000978:	3720      	adds	r7, #32
 800097a:	46bd      	mov	sp, r7
 800097c:	bd80      	pop	{r7, pc}

0800097e <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
{
 800097e:	b580      	push	{r7, lr}
 8000980:	b086      	sub	sp, #24
 8000982:	af00      	add	r7, sp, #0
 8000984:	60f8      	str	r0, [r7, #12]
 8000986:	60b9      	str	r1, [r7, #8]
 8000988:	607a      	str	r2, [r7, #4]
 800098a:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 800098c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800098e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000990:	687b      	ldr	r3, [r7, #4]
 8000992:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8000996:	3b01      	subs	r3, #1
 8000998:	009b      	lsls	r3, r3, #2
 800099a:	4413      	add	r3, r2
 800099c:	613b      	str	r3, [r7, #16]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 800099e:	693b      	ldr	r3, [r7, #16]
 80009a0:	f023 0307 	bic.w	r3, r3, #7
 80009a4:	613b      	str	r3, [r7, #16]
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80009a6:	2300      	movs	r3, #0
 80009a8:	617b      	str	r3, [r7, #20]
 80009aa:	e012      	b.n	80009d2 <prvInitialiseNewTask+0x54>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80009ac:	68ba      	ldr	r2, [r7, #8]
 80009ae:	697b      	ldr	r3, [r7, #20]
 80009b0:	4413      	add	r3, r2
 80009b2:	7819      	ldrb	r1, [r3, #0]
 80009b4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80009b6:	697b      	ldr	r3, [r7, #20]
 80009b8:	4413      	add	r3, r2
 80009ba:	3334      	adds	r3, #52	; 0x34
 80009bc:	460a      	mov	r2, r1
 80009be:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 80009c0:	68ba      	ldr	r2, [r7, #8]
 80009c2:	697b      	ldr	r3, [r7, #20]
 80009c4:	4413      	add	r3, r2
 80009c6:	781b      	ldrb	r3, [r3, #0]
 80009c8:	2b00      	cmp	r3, #0
 80009ca:	d006      	beq.n	80009da <prvInitialiseNewTask+0x5c>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80009cc:	697b      	ldr	r3, [r7, #20]
 80009ce:	3301      	adds	r3, #1
 80009d0:	617b      	str	r3, [r7, #20]
 80009d2:	697b      	ldr	r3, [r7, #20]
 80009d4:	2b0f      	cmp	r3, #15
 80009d6:	d9e9      	bls.n	80009ac <prvInitialiseNewTask+0x2e>
 80009d8:	e000      	b.n	80009dc <prvInitialiseNewTask+0x5e>
		{
			break;
 80009da:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80009dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80009de:	2200      	movs	r2, #0
 80009e0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80009e4:	6a3b      	ldr	r3, [r7, #32]
 80009e6:	2b04      	cmp	r3, #4
 80009e8:	d901      	bls.n	80009ee <prvInitialiseNewTask+0x70>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80009ea:	2304      	movs	r3, #4
 80009ec:	623b      	str	r3, [r7, #32]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80009ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80009f0:	6a3a      	ldr	r2, [r7, #32]
 80009f2:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80009f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80009f6:	6a3a      	ldr	r2, [r7, #32]
 80009f8:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 80009fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80009fc:	2200      	movs	r2, #0
 80009fe:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8000a00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000a02:	3304      	adds	r3, #4
 8000a04:	4618      	mov	r0, r3
 8000a06:	f7ff fee9 	bl	80007dc <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8000a0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000a0c:	3318      	adds	r3, #24
 8000a0e:	4618      	mov	r0, r3
 8000a10:	f7ff fee4 	bl	80007dc <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8000a14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000a16:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000a18:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8000a1a:	6a3b      	ldr	r3, [r7, #32]
 8000a1c:	f1c3 0205 	rsb	r2, r3, #5
 8000a20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000a22:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8000a24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000a26:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000a28:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8000a2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000a2c:	2200      	movs	r2, #0
 8000a2e:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8000a30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000a32:	2200      	movs	r2, #0
 8000a34:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8000a38:	683a      	ldr	r2, [r7, #0]
 8000a3a:	68f9      	ldr	r1, [r7, #12]
 8000a3c:	6938      	ldr	r0, [r7, #16]
 8000a3e:	f000 fb77 	bl	8001130 <pxPortInitialiseStack>
 8000a42:	4602      	mov	r2, r0
 8000a44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000a46:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8000a48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a4a:	2b00      	cmp	r3, #0
 8000a4c:	d002      	beq.n	8000a54 <prvInitialiseNewTask+0xd6>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8000a4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a50:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000a52:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8000a54:	bf00      	nop
 8000a56:	3718      	adds	r7, #24
 8000a58:	46bd      	mov	sp, r7
 8000a5a:	bd80      	pop	{r7, pc}

08000a5c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8000a5c:	b580      	push	{r7, lr}
 8000a5e:	b082      	sub	sp, #8
 8000a60:	af00      	add	r7, sp, #0
 8000a62:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8000a64:	f000 fbe6 	bl	8001234 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8000a68:	4b2b      	ldr	r3, [pc, #172]	; (8000b18 <prvAddNewTaskToReadyList+0xbc>)
 8000a6a:	681b      	ldr	r3, [r3, #0]
 8000a6c:	3301      	adds	r3, #1
 8000a6e:	4a2a      	ldr	r2, [pc, #168]	; (8000b18 <prvAddNewTaskToReadyList+0xbc>)
 8000a70:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8000a72:	4b2a      	ldr	r3, [pc, #168]	; (8000b1c <prvAddNewTaskToReadyList+0xc0>)
 8000a74:	681b      	ldr	r3, [r3, #0]
 8000a76:	2b00      	cmp	r3, #0
 8000a78:	d109      	bne.n	8000a8e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8000a7a:	4a28      	ldr	r2, [pc, #160]	; (8000b1c <prvAddNewTaskToReadyList+0xc0>)
 8000a7c:	687b      	ldr	r3, [r7, #4]
 8000a7e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8000a80:	4b25      	ldr	r3, [pc, #148]	; (8000b18 <prvAddNewTaskToReadyList+0xbc>)
 8000a82:	681b      	ldr	r3, [r3, #0]
 8000a84:	2b01      	cmp	r3, #1
 8000a86:	d110      	bne.n	8000aaa <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8000a88:	f000 fa4e 	bl	8000f28 <prvInitialiseTaskLists>
 8000a8c:	e00d      	b.n	8000aaa <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8000a8e:	4b24      	ldr	r3, [pc, #144]	; (8000b20 <prvAddNewTaskToReadyList+0xc4>)
 8000a90:	681b      	ldr	r3, [r3, #0]
 8000a92:	2b00      	cmp	r3, #0
 8000a94:	d109      	bne.n	8000aaa <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8000a96:	4b21      	ldr	r3, [pc, #132]	; (8000b1c <prvAddNewTaskToReadyList+0xc0>)
 8000a98:	681b      	ldr	r3, [r3, #0]
 8000a9a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000a9c:	687b      	ldr	r3, [r7, #4]
 8000a9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000aa0:	429a      	cmp	r2, r3
 8000aa2:	d802      	bhi.n	8000aaa <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8000aa4:	4a1d      	ldr	r2, [pc, #116]	; (8000b1c <prvAddNewTaskToReadyList+0xc0>)
 8000aa6:	687b      	ldr	r3, [r7, #4]
 8000aa8:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8000aaa:	4b1e      	ldr	r3, [pc, #120]	; (8000b24 <prvAddNewTaskToReadyList+0xc8>)
 8000aac:	681b      	ldr	r3, [r3, #0]
 8000aae:	3301      	adds	r3, #1
 8000ab0:	4a1c      	ldr	r2, [pc, #112]	; (8000b24 <prvAddNewTaskToReadyList+0xc8>)
 8000ab2:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8000ab4:	687b      	ldr	r3, [r7, #4]
 8000ab6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000ab8:	4b1b      	ldr	r3, [pc, #108]	; (8000b28 <prvAddNewTaskToReadyList+0xcc>)
 8000aba:	681b      	ldr	r3, [r3, #0]
 8000abc:	429a      	cmp	r2, r3
 8000abe:	d903      	bls.n	8000ac8 <prvAddNewTaskToReadyList+0x6c>
 8000ac0:	687b      	ldr	r3, [r7, #4]
 8000ac2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000ac4:	4a18      	ldr	r2, [pc, #96]	; (8000b28 <prvAddNewTaskToReadyList+0xcc>)
 8000ac6:	6013      	str	r3, [r2, #0]
 8000ac8:	687b      	ldr	r3, [r7, #4]
 8000aca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000acc:	4613      	mov	r3, r2
 8000ace:	009b      	lsls	r3, r3, #2
 8000ad0:	4413      	add	r3, r2
 8000ad2:	009b      	lsls	r3, r3, #2
 8000ad4:	4a15      	ldr	r2, [pc, #84]	; (8000b2c <prvAddNewTaskToReadyList+0xd0>)
 8000ad6:	441a      	add	r2, r3
 8000ad8:	687b      	ldr	r3, [r7, #4]
 8000ada:	3304      	adds	r3, #4
 8000adc:	4619      	mov	r1, r3
 8000ade:	4610      	mov	r0, r2
 8000ae0:	f7ff fe88 	bl	80007f4 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8000ae4:	f000 fbbe 	bl	8001264 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8000ae8:	4b0d      	ldr	r3, [pc, #52]	; (8000b20 <prvAddNewTaskToReadyList+0xc4>)
 8000aea:	681b      	ldr	r3, [r3, #0]
 8000aec:	2b00      	cmp	r3, #0
 8000aee:	d00e      	beq.n	8000b0e <prvAddNewTaskToReadyList+0xb2>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8000af0:	4b0a      	ldr	r3, [pc, #40]	; (8000b1c <prvAddNewTaskToReadyList+0xc0>)
 8000af2:	681b      	ldr	r3, [r3, #0]
 8000af4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000af6:	687b      	ldr	r3, [r7, #4]
 8000af8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000afa:	429a      	cmp	r2, r3
 8000afc:	d207      	bcs.n	8000b0e <prvAddNewTaskToReadyList+0xb2>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8000afe:	4b0c      	ldr	r3, [pc, #48]	; (8000b30 <prvAddNewTaskToReadyList+0xd4>)
 8000b00:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000b04:	601a      	str	r2, [r3, #0]
 8000b06:	f3bf 8f4f 	dsb	sy
 8000b0a:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8000b0e:	bf00      	nop
 8000b10:	3708      	adds	r7, #8
 8000b12:	46bd      	mov	sp, r7
 8000b14:	bd80      	pop	{r7, pc}
 8000b16:	bf00      	nop
 8000b18:	20000124 	.word	0x20000124
 8000b1c:	2000004c 	.word	0x2000004c
 8000b20:	20000130 	.word	0x20000130
 8000b24:	20000140 	.word	0x20000140
 8000b28:	2000012c 	.word	0x2000012c
 8000b2c:	20000050 	.word	0x20000050
 8000b30:	e000ed04 	.word	0xe000ed04

08000b34 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8000b34:	b580      	push	{r7, lr}
 8000b36:	b084      	sub	sp, #16
 8000b38:	af00      	add	r7, sp, #0
 8000b3a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8000b3c:	2300      	movs	r3, #0
 8000b3e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8000b40:	687b      	ldr	r3, [r7, #4]
 8000b42:	2b00      	cmp	r3, #0
 8000b44:	d008      	beq.n	8000b58 <vTaskDelay+0x24>
		{
			configASSERT( uxSchedulerSuspended == 0 );
			vTaskSuspendAll();
 8000b46:	f000 f84f 	bl	8000be8 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8000b4a:	2100      	movs	r1, #0
 8000b4c:	6878      	ldr	r0, [r7, #4]
 8000b4e:	f000 fa9b 	bl	8001088 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8000b52:	f000 f857 	bl	8000c04 <xTaskResumeAll>
 8000b56:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8000b58:	68fb      	ldr	r3, [r7, #12]
 8000b5a:	2b00      	cmp	r3, #0
 8000b5c:	d107      	bne.n	8000b6e <vTaskDelay+0x3a>
		{
			portYIELD_WITHIN_API();
 8000b5e:	4b06      	ldr	r3, [pc, #24]	; (8000b78 <vTaskDelay+0x44>)
 8000b60:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000b64:	601a      	str	r2, [r3, #0]
 8000b66:	f3bf 8f4f 	dsb	sy
 8000b6a:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8000b6e:	bf00      	nop
 8000b70:	3710      	adds	r7, #16
 8000b72:	46bd      	mov	sp, r7
 8000b74:	bd80      	pop	{r7, pc}
 8000b76:	bf00      	nop
 8000b78:	e000ed04 	.word	0xe000ed04

08000b7c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8000b7c:	b580      	push	{r7, lr}
 8000b7e:	b084      	sub	sp, #16
 8000b80:	af02      	add	r7, sp, #8
		}
	}
	#else
	{
		/* The Idle task is being created using dynamically allocated RAM. */
		xReturn = xTaskCreate(	prvIdleTask,
 8000b82:	4b13      	ldr	r3, [pc, #76]	; (8000bd0 <vTaskStartScheduler+0x54>)
 8000b84:	9301      	str	r3, [sp, #4]
 8000b86:	2300      	movs	r3, #0
 8000b88:	9300      	str	r3, [sp, #0]
 8000b8a:	2300      	movs	r3, #0
 8000b8c:	2280      	movs	r2, #128	; 0x80
 8000b8e:	4911      	ldr	r1, [pc, #68]	; (8000bd4 <vTaskStartScheduler+0x58>)
 8000b90:	4811      	ldr	r0, [pc, #68]	; (8000bd8 <vTaskStartScheduler+0x5c>)
 8000b92:	f7ff feb3 	bl	80008fc <xTaskCreate>
 8000b96:	6078      	str	r0, [r7, #4]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8000b98:	687b      	ldr	r3, [r7, #4]
 8000b9a:	2b01      	cmp	r3, #1
 8000b9c:	d114      	bne.n	8000bc8 <vTaskStartScheduler+0x4c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8000b9e:	f04f 03bf 	mov.w	r3, #191	; 0xbf
 8000ba2:	f383 8811 	msr	BASEPRI, r3
 8000ba6:	f3bf 8f6f 	isb	sy
 8000baa:	f3bf 8f4f 	dsb	sy
 8000bae:	603b      	str	r3, [r7, #0]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8000bb0:	4b0a      	ldr	r3, [pc, #40]	; (8000bdc <vTaskStartScheduler+0x60>)
 8000bb2:	f04f 32ff 	mov.w	r2, #4294967295
 8000bb6:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8000bb8:	4b09      	ldr	r3, [pc, #36]	; (8000be0 <vTaskStartScheduler+0x64>)
 8000bba:	2201      	movs	r2, #1
 8000bbc:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8000bbe:	4b09      	ldr	r3, [pc, #36]	; (8000be4 <vTaskStartScheduler+0x68>)
 8000bc0:	2200      	movs	r2, #0
 8000bc2:	601a      	str	r2, [r3, #0]
		the run time counter time base. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8000bc4:	f000 fb18 	bl	80011f8 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8000bc8:	bf00      	nop
 8000bca:	3708      	adds	r7, #8
 8000bcc:	46bd      	mov	sp, r7
 8000bce:	bd80      	pop	{r7, pc}
 8000bd0:	20000148 	.word	0x20000148
 8000bd4:	0800198c 	.word	0x0800198c
 8000bd8:	08000ef9 	.word	0x08000ef9
 8000bdc:	20000144 	.word	0x20000144
 8000be0:	20000130 	.word	0x20000130
 8000be4:	20000128 	.word	0x20000128

08000be8 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8000be8:	b480      	push	{r7}
 8000bea:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8000bec:	4b04      	ldr	r3, [pc, #16]	; (8000c00 <vTaskSuspendAll+0x18>)
 8000bee:	681b      	ldr	r3, [r3, #0]
 8000bf0:	3301      	adds	r3, #1
 8000bf2:	4a03      	ldr	r2, [pc, #12]	; (8000c00 <vTaskSuspendAll+0x18>)
 8000bf4:	6013      	str	r3, [r2, #0]
}
 8000bf6:	bf00      	nop
 8000bf8:	46bd      	mov	sp, r7
 8000bfa:	bc80      	pop	{r7}
 8000bfc:	4770      	bx	lr
 8000bfe:	bf00      	nop
 8000c00:	2000014c 	.word	0x2000014c

08000c04 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8000c04:	b580      	push	{r7, lr}
 8000c06:	b084      	sub	sp, #16
 8000c08:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8000c0a:	2300      	movs	r3, #0
 8000c0c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8000c0e:	2300      	movs	r3, #0
 8000c10:	60bb      	str	r3, [r7, #8]
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8000c12:	f000 fb0f 	bl	8001234 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8000c16:	4b39      	ldr	r3, [pc, #228]	; (8000cfc <xTaskResumeAll+0xf8>)
 8000c18:	681b      	ldr	r3, [r3, #0]
 8000c1a:	3b01      	subs	r3, #1
 8000c1c:	4a37      	ldr	r2, [pc, #220]	; (8000cfc <xTaskResumeAll+0xf8>)
 8000c1e:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8000c20:	4b36      	ldr	r3, [pc, #216]	; (8000cfc <xTaskResumeAll+0xf8>)
 8000c22:	681b      	ldr	r3, [r3, #0]
 8000c24:	2b00      	cmp	r3, #0
 8000c26:	d162      	bne.n	8000cee <xTaskResumeAll+0xea>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8000c28:	4b35      	ldr	r3, [pc, #212]	; (8000d00 <xTaskResumeAll+0xfc>)
 8000c2a:	681b      	ldr	r3, [r3, #0]
 8000c2c:	2b00      	cmp	r3, #0
 8000c2e:	d05e      	beq.n	8000cee <xTaskResumeAll+0xea>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8000c30:	e02f      	b.n	8000c92 <xTaskResumeAll+0x8e>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8000c32:	4b34      	ldr	r3, [pc, #208]	; (8000d04 <xTaskResumeAll+0x100>)
 8000c34:	68db      	ldr	r3, [r3, #12]
 8000c36:	68db      	ldr	r3, [r3, #12]
 8000c38:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8000c3a:	68fb      	ldr	r3, [r7, #12]
 8000c3c:	3318      	adds	r3, #24
 8000c3e:	4618      	mov	r0, r3
 8000c40:	f7ff fe33 	bl	80008aa <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8000c44:	68fb      	ldr	r3, [r7, #12]
 8000c46:	3304      	adds	r3, #4
 8000c48:	4618      	mov	r0, r3
 8000c4a:	f7ff fe2e 	bl	80008aa <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8000c4e:	68fb      	ldr	r3, [r7, #12]
 8000c50:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000c52:	4b2d      	ldr	r3, [pc, #180]	; (8000d08 <xTaskResumeAll+0x104>)
 8000c54:	681b      	ldr	r3, [r3, #0]
 8000c56:	429a      	cmp	r2, r3
 8000c58:	d903      	bls.n	8000c62 <xTaskResumeAll+0x5e>
 8000c5a:	68fb      	ldr	r3, [r7, #12]
 8000c5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000c5e:	4a2a      	ldr	r2, [pc, #168]	; (8000d08 <xTaskResumeAll+0x104>)
 8000c60:	6013      	str	r3, [r2, #0]
 8000c62:	68fb      	ldr	r3, [r7, #12]
 8000c64:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000c66:	4613      	mov	r3, r2
 8000c68:	009b      	lsls	r3, r3, #2
 8000c6a:	4413      	add	r3, r2
 8000c6c:	009b      	lsls	r3, r3, #2
 8000c6e:	4a27      	ldr	r2, [pc, #156]	; (8000d0c <xTaskResumeAll+0x108>)
 8000c70:	441a      	add	r2, r3
 8000c72:	68fb      	ldr	r3, [r7, #12]
 8000c74:	3304      	adds	r3, #4
 8000c76:	4619      	mov	r1, r3
 8000c78:	4610      	mov	r0, r2
 8000c7a:	f7ff fdbb 	bl	80007f4 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8000c7e:	68fb      	ldr	r3, [r7, #12]
 8000c80:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000c82:	4b23      	ldr	r3, [pc, #140]	; (8000d10 <xTaskResumeAll+0x10c>)
 8000c84:	681b      	ldr	r3, [r3, #0]
 8000c86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000c88:	429a      	cmp	r2, r3
 8000c8a:	d302      	bcc.n	8000c92 <xTaskResumeAll+0x8e>
					{
						xYieldPending = pdTRUE;
 8000c8c:	4b21      	ldr	r3, [pc, #132]	; (8000d14 <xTaskResumeAll+0x110>)
 8000c8e:	2201      	movs	r2, #1
 8000c90:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8000c92:	4b1c      	ldr	r3, [pc, #112]	; (8000d04 <xTaskResumeAll+0x100>)
 8000c94:	681b      	ldr	r3, [r3, #0]
 8000c96:	2b00      	cmp	r3, #0
 8000c98:	d1cb      	bne.n	8000c32 <xTaskResumeAll+0x2e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8000c9a:	68fb      	ldr	r3, [r7, #12]
 8000c9c:	2b00      	cmp	r3, #0
 8000c9e:	d001      	beq.n	8000ca4 <xTaskResumeAll+0xa0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8000ca0:	f000 f9ce 	bl	8001040 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8000ca4:	4b1c      	ldr	r3, [pc, #112]	; (8000d18 <xTaskResumeAll+0x114>)
 8000ca6:	681b      	ldr	r3, [r3, #0]
 8000ca8:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8000caa:	687b      	ldr	r3, [r7, #4]
 8000cac:	2b00      	cmp	r3, #0
 8000cae:	d010      	beq.n	8000cd2 <xTaskResumeAll+0xce>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8000cb0:	f000 f836 	bl	8000d20 <xTaskIncrementTick>
 8000cb4:	4603      	mov	r3, r0
 8000cb6:	2b00      	cmp	r3, #0
 8000cb8:	d002      	beq.n	8000cc0 <xTaskResumeAll+0xbc>
							{
								xYieldPending = pdTRUE;
 8000cba:	4b16      	ldr	r3, [pc, #88]	; (8000d14 <xTaskResumeAll+0x110>)
 8000cbc:	2201      	movs	r2, #1
 8000cbe:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8000cc0:	687b      	ldr	r3, [r7, #4]
 8000cc2:	3b01      	subs	r3, #1
 8000cc4:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8000cc6:	687b      	ldr	r3, [r7, #4]
 8000cc8:	2b00      	cmp	r3, #0
 8000cca:	d1f1      	bne.n	8000cb0 <xTaskResumeAll+0xac>

						uxPendedTicks = 0;
 8000ccc:	4b12      	ldr	r3, [pc, #72]	; (8000d18 <xTaskResumeAll+0x114>)
 8000cce:	2200      	movs	r2, #0
 8000cd0:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8000cd2:	4b10      	ldr	r3, [pc, #64]	; (8000d14 <xTaskResumeAll+0x110>)
 8000cd4:	681b      	ldr	r3, [r3, #0]
 8000cd6:	2b00      	cmp	r3, #0
 8000cd8:	d009      	beq.n	8000cee <xTaskResumeAll+0xea>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8000cda:	2301      	movs	r3, #1
 8000cdc:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8000cde:	4b0f      	ldr	r3, [pc, #60]	; (8000d1c <xTaskResumeAll+0x118>)
 8000ce0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000ce4:	601a      	str	r2, [r3, #0]
 8000ce6:	f3bf 8f4f 	dsb	sy
 8000cea:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8000cee:	f000 fab9 	bl	8001264 <vPortExitCritical>

	return xAlreadyYielded;
 8000cf2:	68bb      	ldr	r3, [r7, #8]
}
 8000cf4:	4618      	mov	r0, r3
 8000cf6:	3710      	adds	r7, #16
 8000cf8:	46bd      	mov	sp, r7
 8000cfa:	bd80      	pop	{r7, pc}
 8000cfc:	2000014c 	.word	0x2000014c
 8000d00:	20000124 	.word	0x20000124
 8000d04:	200000e4 	.word	0x200000e4
 8000d08:	2000012c 	.word	0x2000012c
 8000d0c:	20000050 	.word	0x20000050
 8000d10:	2000004c 	.word	0x2000004c
 8000d14:	20000138 	.word	0x20000138
 8000d18:	20000134 	.word	0x20000134
 8000d1c:	e000ed04 	.word	0xe000ed04

08000d20 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8000d20:	b580      	push	{r7, lr}
 8000d22:	b086      	sub	sp, #24
 8000d24:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8000d26:	2300      	movs	r3, #0
 8000d28:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8000d2a:	4b41      	ldr	r3, [pc, #260]	; (8000e30 <xTaskIncrementTick+0x110>)
 8000d2c:	681b      	ldr	r3, [r3, #0]
 8000d2e:	2b00      	cmp	r3, #0
 8000d30:	d16e      	bne.n	8000e10 <xTaskIncrementTick+0xf0>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + 1;
 8000d32:	4b40      	ldr	r3, [pc, #256]	; (8000e34 <xTaskIncrementTick+0x114>)
 8000d34:	681b      	ldr	r3, [r3, #0]
 8000d36:	3301      	adds	r3, #1
 8000d38:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8000d3a:	4a3e      	ldr	r2, [pc, #248]	; (8000e34 <xTaskIncrementTick+0x114>)
 8000d3c:	693b      	ldr	r3, [r7, #16]
 8000d3e:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U )
 8000d40:	693b      	ldr	r3, [r7, #16]
 8000d42:	2b00      	cmp	r3, #0
 8000d44:	d110      	bne.n	8000d68 <xTaskIncrementTick+0x48>
		{
			taskSWITCH_DELAYED_LISTS();
 8000d46:	4b3c      	ldr	r3, [pc, #240]	; (8000e38 <xTaskIncrementTick+0x118>)
 8000d48:	681b      	ldr	r3, [r3, #0]
 8000d4a:	60fb      	str	r3, [r7, #12]
 8000d4c:	4b3b      	ldr	r3, [pc, #236]	; (8000e3c <xTaskIncrementTick+0x11c>)
 8000d4e:	681b      	ldr	r3, [r3, #0]
 8000d50:	4a39      	ldr	r2, [pc, #228]	; (8000e38 <xTaskIncrementTick+0x118>)
 8000d52:	6013      	str	r3, [r2, #0]
 8000d54:	4a39      	ldr	r2, [pc, #228]	; (8000e3c <xTaskIncrementTick+0x11c>)
 8000d56:	68fb      	ldr	r3, [r7, #12]
 8000d58:	6013      	str	r3, [r2, #0]
 8000d5a:	4b39      	ldr	r3, [pc, #228]	; (8000e40 <xTaskIncrementTick+0x120>)
 8000d5c:	681b      	ldr	r3, [r3, #0]
 8000d5e:	3301      	adds	r3, #1
 8000d60:	4a37      	ldr	r2, [pc, #220]	; (8000e40 <xTaskIncrementTick+0x120>)
 8000d62:	6013      	str	r3, [r2, #0]
 8000d64:	f000 f96c 	bl	8001040 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8000d68:	4b36      	ldr	r3, [pc, #216]	; (8000e44 <xTaskIncrementTick+0x124>)
 8000d6a:	681b      	ldr	r3, [r3, #0]
 8000d6c:	693a      	ldr	r2, [r7, #16]
 8000d6e:	429a      	cmp	r2, r3
 8000d70:	d353      	bcc.n	8000e1a <xTaskIncrementTick+0xfa>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8000d72:	4b31      	ldr	r3, [pc, #196]	; (8000e38 <xTaskIncrementTick+0x118>)
 8000d74:	681b      	ldr	r3, [r3, #0]
 8000d76:	681b      	ldr	r3, [r3, #0]
 8000d78:	2b00      	cmp	r3, #0
 8000d7a:	d101      	bne.n	8000d80 <xTaskIncrementTick+0x60>
 8000d7c:	2301      	movs	r3, #1
 8000d7e:	e000      	b.n	8000d82 <xTaskIncrementTick+0x62>
 8000d80:	2300      	movs	r3, #0
 8000d82:	2b00      	cmp	r3, #0
 8000d84:	d004      	beq.n	8000d90 <xTaskIncrementTick+0x70>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8000d86:	4b2f      	ldr	r3, [pc, #188]	; (8000e44 <xTaskIncrementTick+0x124>)
 8000d88:	f04f 32ff 	mov.w	r2, #4294967295
 8000d8c:	601a      	str	r2, [r3, #0]
					break;
 8000d8e:	e044      	b.n	8000e1a <xTaskIncrementTick+0xfa>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8000d90:	4b29      	ldr	r3, [pc, #164]	; (8000e38 <xTaskIncrementTick+0x118>)
 8000d92:	681b      	ldr	r3, [r3, #0]
 8000d94:	68db      	ldr	r3, [r3, #12]
 8000d96:	68db      	ldr	r3, [r3, #12]
 8000d98:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8000d9a:	68bb      	ldr	r3, [r7, #8]
 8000d9c:	685b      	ldr	r3, [r3, #4]
 8000d9e:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8000da0:	693a      	ldr	r2, [r7, #16]
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	429a      	cmp	r2, r3
 8000da6:	d203      	bcs.n	8000db0 <xTaskIncrementTick+0x90>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8000da8:	4a26      	ldr	r2, [pc, #152]	; (8000e44 <xTaskIncrementTick+0x124>)
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	6013      	str	r3, [r2, #0]
						break;
 8000dae:	e034      	b.n	8000e1a <xTaskIncrementTick+0xfa>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8000db0:	68bb      	ldr	r3, [r7, #8]
 8000db2:	3304      	adds	r3, #4
 8000db4:	4618      	mov	r0, r3
 8000db6:	f7ff fd78 	bl	80008aa <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8000dba:	68bb      	ldr	r3, [r7, #8]
 8000dbc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000dbe:	2b00      	cmp	r3, #0
 8000dc0:	d004      	beq.n	8000dcc <xTaskIncrementTick+0xac>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8000dc2:	68bb      	ldr	r3, [r7, #8]
 8000dc4:	3318      	adds	r3, #24
 8000dc6:	4618      	mov	r0, r3
 8000dc8:	f7ff fd6f 	bl	80008aa <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8000dcc:	68bb      	ldr	r3, [r7, #8]
 8000dce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000dd0:	4b1d      	ldr	r3, [pc, #116]	; (8000e48 <xTaskIncrementTick+0x128>)
 8000dd2:	681b      	ldr	r3, [r3, #0]
 8000dd4:	429a      	cmp	r2, r3
 8000dd6:	d903      	bls.n	8000de0 <xTaskIncrementTick+0xc0>
 8000dd8:	68bb      	ldr	r3, [r7, #8]
 8000dda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000ddc:	4a1a      	ldr	r2, [pc, #104]	; (8000e48 <xTaskIncrementTick+0x128>)
 8000dde:	6013      	str	r3, [r2, #0]
 8000de0:	68bb      	ldr	r3, [r7, #8]
 8000de2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000de4:	4613      	mov	r3, r2
 8000de6:	009b      	lsls	r3, r3, #2
 8000de8:	4413      	add	r3, r2
 8000dea:	009b      	lsls	r3, r3, #2
 8000dec:	4a17      	ldr	r2, [pc, #92]	; (8000e4c <xTaskIncrementTick+0x12c>)
 8000dee:	441a      	add	r2, r3
 8000df0:	68bb      	ldr	r3, [r7, #8]
 8000df2:	3304      	adds	r3, #4
 8000df4:	4619      	mov	r1, r3
 8000df6:	4610      	mov	r0, r2
 8000df8:	f7ff fcfc 	bl	80007f4 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8000dfc:	68bb      	ldr	r3, [r7, #8]
 8000dfe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000e00:	4b13      	ldr	r3, [pc, #76]	; (8000e50 <xTaskIncrementTick+0x130>)
 8000e02:	681b      	ldr	r3, [r3, #0]
 8000e04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e06:	429a      	cmp	r2, r3
 8000e08:	d3b3      	bcc.n	8000d72 <xTaskIncrementTick+0x52>
						{
							xSwitchRequired = pdTRUE;
 8000e0a:	2301      	movs	r3, #1
 8000e0c:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8000e0e:	e7b0      	b.n	8000d72 <xTaskIncrementTick+0x52>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8000e10:	4b10      	ldr	r3, [pc, #64]	; (8000e54 <xTaskIncrementTick+0x134>)
 8000e12:	681b      	ldr	r3, [r3, #0]
 8000e14:	3301      	adds	r3, #1
 8000e16:	4a0f      	ldr	r2, [pc, #60]	; (8000e54 <xTaskIncrementTick+0x134>)
 8000e18:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8000e1a:	4b0f      	ldr	r3, [pc, #60]	; (8000e58 <xTaskIncrementTick+0x138>)
 8000e1c:	681b      	ldr	r3, [r3, #0]
 8000e1e:	2b00      	cmp	r3, #0
 8000e20:	d001      	beq.n	8000e26 <xTaskIncrementTick+0x106>
		{
			xSwitchRequired = pdTRUE;
 8000e22:	2301      	movs	r3, #1
 8000e24:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8000e26:	697b      	ldr	r3, [r7, #20]
}
 8000e28:	4618      	mov	r0, r3
 8000e2a:	3718      	adds	r7, #24
 8000e2c:	46bd      	mov	sp, r7
 8000e2e:	bd80      	pop	{r7, pc}
 8000e30:	2000014c 	.word	0x2000014c
 8000e34:	20000128 	.word	0x20000128
 8000e38:	200000dc 	.word	0x200000dc
 8000e3c:	200000e0 	.word	0x200000e0
 8000e40:	2000013c 	.word	0x2000013c
 8000e44:	20000144 	.word	0x20000144
 8000e48:	2000012c 	.word	0x2000012c
 8000e4c:	20000050 	.word	0x20000050
 8000e50:	2000004c 	.word	0x2000004c
 8000e54:	20000134 	.word	0x20000134
 8000e58:	20000138 	.word	0x20000138

08000e5c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8000e5c:	b480      	push	{r7}
 8000e5e:	b083      	sub	sp, #12
 8000e60:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8000e62:	4b20      	ldr	r3, [pc, #128]	; (8000ee4 <vTaskSwitchContext+0x88>)
 8000e64:	681b      	ldr	r3, [r3, #0]
 8000e66:	2b00      	cmp	r3, #0
 8000e68:	d003      	beq.n	8000e72 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8000e6a:	4b1f      	ldr	r3, [pc, #124]	; (8000ee8 <vTaskSwitchContext+0x8c>)
 8000e6c:	2201      	movs	r2, #1
 8000e6e:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8000e70:	e033      	b.n	8000eda <vTaskSwitchContext+0x7e>
		xYieldPending = pdFALSE;
 8000e72:	4b1d      	ldr	r3, [pc, #116]	; (8000ee8 <vTaskSwitchContext+0x8c>)
 8000e74:	2200      	movs	r2, #0
 8000e76:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8000e78:	4b1c      	ldr	r3, [pc, #112]	; (8000eec <vTaskSwitchContext+0x90>)
 8000e7a:	681b      	ldr	r3, [r3, #0]
 8000e7c:	607b      	str	r3, [r7, #4]
 8000e7e:	e002      	b.n	8000e86 <vTaskSwitchContext+0x2a>
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	3b01      	subs	r3, #1
 8000e84:	607b      	str	r3, [r7, #4]
 8000e86:	491a      	ldr	r1, [pc, #104]	; (8000ef0 <vTaskSwitchContext+0x94>)
 8000e88:	687a      	ldr	r2, [r7, #4]
 8000e8a:	4613      	mov	r3, r2
 8000e8c:	009b      	lsls	r3, r3, #2
 8000e8e:	4413      	add	r3, r2
 8000e90:	009b      	lsls	r3, r3, #2
 8000e92:	440b      	add	r3, r1
 8000e94:	681b      	ldr	r3, [r3, #0]
 8000e96:	2b00      	cmp	r3, #0
 8000e98:	d0f2      	beq.n	8000e80 <vTaskSwitchContext+0x24>
 8000e9a:	687a      	ldr	r2, [r7, #4]
 8000e9c:	4613      	mov	r3, r2
 8000e9e:	009b      	lsls	r3, r3, #2
 8000ea0:	4413      	add	r3, r2
 8000ea2:	009b      	lsls	r3, r3, #2
 8000ea4:	4a12      	ldr	r2, [pc, #72]	; (8000ef0 <vTaskSwitchContext+0x94>)
 8000ea6:	4413      	add	r3, r2
 8000ea8:	603b      	str	r3, [r7, #0]
 8000eaa:	683b      	ldr	r3, [r7, #0]
 8000eac:	685b      	ldr	r3, [r3, #4]
 8000eae:	685a      	ldr	r2, [r3, #4]
 8000eb0:	683b      	ldr	r3, [r7, #0]
 8000eb2:	605a      	str	r2, [r3, #4]
 8000eb4:	683b      	ldr	r3, [r7, #0]
 8000eb6:	685a      	ldr	r2, [r3, #4]
 8000eb8:	683b      	ldr	r3, [r7, #0]
 8000eba:	3308      	adds	r3, #8
 8000ebc:	429a      	cmp	r2, r3
 8000ebe:	d104      	bne.n	8000eca <vTaskSwitchContext+0x6e>
 8000ec0:	683b      	ldr	r3, [r7, #0]
 8000ec2:	685b      	ldr	r3, [r3, #4]
 8000ec4:	685a      	ldr	r2, [r3, #4]
 8000ec6:	683b      	ldr	r3, [r7, #0]
 8000ec8:	605a      	str	r2, [r3, #4]
 8000eca:	683b      	ldr	r3, [r7, #0]
 8000ecc:	685b      	ldr	r3, [r3, #4]
 8000ece:	68db      	ldr	r3, [r3, #12]
 8000ed0:	4a08      	ldr	r2, [pc, #32]	; (8000ef4 <vTaskSwitchContext+0x98>)
 8000ed2:	6013      	str	r3, [r2, #0]
 8000ed4:	4a05      	ldr	r2, [pc, #20]	; (8000eec <vTaskSwitchContext+0x90>)
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	6013      	str	r3, [r2, #0]
}
 8000eda:	bf00      	nop
 8000edc:	370c      	adds	r7, #12
 8000ede:	46bd      	mov	sp, r7
 8000ee0:	bc80      	pop	{r7}
 8000ee2:	4770      	bx	lr
 8000ee4:	2000014c 	.word	0x2000014c
 8000ee8:	20000138 	.word	0x20000138
 8000eec:	2000012c 	.word	0x2000012c
 8000ef0:	20000050 	.word	0x20000050
 8000ef4:	2000004c 	.word	0x2000004c

08000ef8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8000ef8:	b580      	push	{r7, lr}
 8000efa:	b082      	sub	sp, #8
 8000efc:	af00      	add	r7, sp, #0
 8000efe:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8000f00:	f000 f852 	bl	8000fa8 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8000f04:	4b06      	ldr	r3, [pc, #24]	; (8000f20 <prvIdleTask+0x28>)
 8000f06:	681b      	ldr	r3, [r3, #0]
 8000f08:	2b01      	cmp	r3, #1
 8000f0a:	d9f9      	bls.n	8000f00 <prvIdleTask+0x8>
			{
				taskYIELD();
 8000f0c:	4b05      	ldr	r3, [pc, #20]	; (8000f24 <prvIdleTask+0x2c>)
 8000f0e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000f12:	601a      	str	r2, [r3, #0]
 8000f14:	f3bf 8f4f 	dsb	sy
 8000f18:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8000f1c:	e7f0      	b.n	8000f00 <prvIdleTask+0x8>
 8000f1e:	bf00      	nop
 8000f20:	20000050 	.word	0x20000050
 8000f24:	e000ed04 	.word	0xe000ed04

08000f28 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8000f28:	b580      	push	{r7, lr}
 8000f2a:	b082      	sub	sp, #8
 8000f2c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8000f2e:	2300      	movs	r3, #0
 8000f30:	607b      	str	r3, [r7, #4]
 8000f32:	e00c      	b.n	8000f4e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8000f34:	687a      	ldr	r2, [r7, #4]
 8000f36:	4613      	mov	r3, r2
 8000f38:	009b      	lsls	r3, r3, #2
 8000f3a:	4413      	add	r3, r2
 8000f3c:	009b      	lsls	r3, r3, #2
 8000f3e:	4a12      	ldr	r2, [pc, #72]	; (8000f88 <prvInitialiseTaskLists+0x60>)
 8000f40:	4413      	add	r3, r2
 8000f42:	4618      	mov	r0, r3
 8000f44:	f7ff fc2b 	bl	800079e <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	3301      	adds	r3, #1
 8000f4c:	607b      	str	r3, [r7, #4]
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	2b04      	cmp	r3, #4
 8000f52:	d9ef      	bls.n	8000f34 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8000f54:	480d      	ldr	r0, [pc, #52]	; (8000f8c <prvInitialiseTaskLists+0x64>)
 8000f56:	f7ff fc22 	bl	800079e <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8000f5a:	480d      	ldr	r0, [pc, #52]	; (8000f90 <prvInitialiseTaskLists+0x68>)
 8000f5c:	f7ff fc1f 	bl	800079e <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8000f60:	480c      	ldr	r0, [pc, #48]	; (8000f94 <prvInitialiseTaskLists+0x6c>)
 8000f62:	f7ff fc1c 	bl	800079e <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8000f66:	480c      	ldr	r0, [pc, #48]	; (8000f98 <prvInitialiseTaskLists+0x70>)
 8000f68:	f7ff fc19 	bl	800079e <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8000f6c:	480b      	ldr	r0, [pc, #44]	; (8000f9c <prvInitialiseTaskLists+0x74>)
 8000f6e:	f7ff fc16 	bl	800079e <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8000f72:	4b0b      	ldr	r3, [pc, #44]	; (8000fa0 <prvInitialiseTaskLists+0x78>)
 8000f74:	4a05      	ldr	r2, [pc, #20]	; (8000f8c <prvInitialiseTaskLists+0x64>)
 8000f76:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8000f78:	4b0a      	ldr	r3, [pc, #40]	; (8000fa4 <prvInitialiseTaskLists+0x7c>)
 8000f7a:	4a05      	ldr	r2, [pc, #20]	; (8000f90 <prvInitialiseTaskLists+0x68>)
 8000f7c:	601a      	str	r2, [r3, #0]
}
 8000f7e:	bf00      	nop
 8000f80:	3708      	adds	r7, #8
 8000f82:	46bd      	mov	sp, r7
 8000f84:	bd80      	pop	{r7, pc}
 8000f86:	bf00      	nop
 8000f88:	20000050 	.word	0x20000050
 8000f8c:	200000b4 	.word	0x200000b4
 8000f90:	200000c8 	.word	0x200000c8
 8000f94:	200000e4 	.word	0x200000e4
 8000f98:	200000f8 	.word	0x200000f8
 8000f9c:	20000110 	.word	0x20000110
 8000fa0:	200000dc 	.word	0x200000dc
 8000fa4:	200000e0 	.word	0x200000e0

08000fa8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8000fa8:	b580      	push	{r7, lr}
 8000faa:	b082      	sub	sp, #8
 8000fac:	af00      	add	r7, sp, #0
	{
		BaseType_t xListIsEmpty;

		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8000fae:	e028      	b.n	8001002 <prvCheckTasksWaitingTermination+0x5a>
		{
			vTaskSuspendAll();
 8000fb0:	f7ff fe1a 	bl	8000be8 <vTaskSuspendAll>
			{
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
 8000fb4:	4b17      	ldr	r3, [pc, #92]	; (8001014 <prvCheckTasksWaitingTermination+0x6c>)
 8000fb6:	681b      	ldr	r3, [r3, #0]
 8000fb8:	2b00      	cmp	r3, #0
 8000fba:	bf0c      	ite	eq
 8000fbc:	2301      	moveq	r3, #1
 8000fbe:	2300      	movne	r3, #0
 8000fc0:	b2db      	uxtb	r3, r3
 8000fc2:	607b      	str	r3, [r7, #4]
			}
			( void ) xTaskResumeAll();
 8000fc4:	f7ff fe1e 	bl	8000c04 <xTaskResumeAll>

			if( xListIsEmpty == pdFALSE )
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	2b00      	cmp	r3, #0
 8000fcc:	d119      	bne.n	8001002 <prvCheckTasksWaitingTermination+0x5a>
			{
				TCB_t *pxTCB;

				taskENTER_CRITICAL();
 8000fce:	f000 f931 	bl	8001234 <vPortEnterCritical>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8000fd2:	4b10      	ldr	r3, [pc, #64]	; (8001014 <prvCheckTasksWaitingTermination+0x6c>)
 8000fd4:	68db      	ldr	r3, [r3, #12]
 8000fd6:	68db      	ldr	r3, [r3, #12]
 8000fd8:	603b      	str	r3, [r7, #0]
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8000fda:	683b      	ldr	r3, [r7, #0]
 8000fdc:	3304      	adds	r3, #4
 8000fde:	4618      	mov	r0, r3
 8000fe0:	f7ff fc63 	bl	80008aa <uxListRemove>
					--uxCurrentNumberOfTasks;
 8000fe4:	4b0c      	ldr	r3, [pc, #48]	; (8001018 <prvCheckTasksWaitingTermination+0x70>)
 8000fe6:	681b      	ldr	r3, [r3, #0]
 8000fe8:	3b01      	subs	r3, #1
 8000fea:	4a0b      	ldr	r2, [pc, #44]	; (8001018 <prvCheckTasksWaitingTermination+0x70>)
 8000fec:	6013      	str	r3, [r2, #0]
					--uxDeletedTasksWaitingCleanUp;
 8000fee:	4b0b      	ldr	r3, [pc, #44]	; (800101c <prvCheckTasksWaitingTermination+0x74>)
 8000ff0:	681b      	ldr	r3, [r3, #0]
 8000ff2:	3b01      	subs	r3, #1
 8000ff4:	4a09      	ldr	r2, [pc, #36]	; (800101c <prvCheckTasksWaitingTermination+0x74>)
 8000ff6:	6013      	str	r3, [r2, #0]
				}
				taskEXIT_CRITICAL();
 8000ff8:	f000 f934 	bl	8001264 <vPortExitCritical>

				prvDeleteTCB( pxTCB );
 8000ffc:	6838      	ldr	r0, [r7, #0]
 8000ffe:	f000 f80f 	bl	8001020 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8001002:	4b06      	ldr	r3, [pc, #24]	; (800101c <prvCheckTasksWaitingTermination+0x74>)
 8001004:	681b      	ldr	r3, [r3, #0]
 8001006:	2b00      	cmp	r3, #0
 8001008:	d1d2      	bne.n	8000fb0 <prvCheckTasksWaitingTermination+0x8>
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800100a:	bf00      	nop
 800100c:	3708      	adds	r7, #8
 800100e:	46bd      	mov	sp, r7
 8001010:	bd80      	pop	{r7, pc}
 8001012:	bf00      	nop
 8001014:	200000f8 	.word	0x200000f8
 8001018:	20000124 	.word	0x20000124
 800101c:	2000010c 	.word	0x2000010c

08001020 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8001020:	b580      	push	{r7, lr}
 8001022:	b082      	sub	sp, #8
 8001024:	af00      	add	r7, sp, #0
 8001026:	6078      	str	r0, [r7, #4]

		#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
		{
			/* The task can only have been allocated dynamically - free both
			the stack and TCB. */
			vPortFree( pxTCB->pxStack );
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800102c:	4618      	mov	r0, r3
 800102e:	f000 fa23 	bl	8001478 <vPortFree>
			vPortFree( pxTCB );
 8001032:	6878      	ldr	r0, [r7, #4]
 8001034:	f000 fa20 	bl	8001478 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	)
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8001038:	bf00      	nop
 800103a:	3708      	adds	r7, #8
 800103c:	46bd      	mov	sp, r7
 800103e:	bd80      	pop	{r7, pc}

08001040 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8001040:	b480      	push	{r7}
 8001042:	b083      	sub	sp, #12
 8001044:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8001046:	4b0e      	ldr	r3, [pc, #56]	; (8001080 <prvResetNextTaskUnblockTime+0x40>)
 8001048:	681b      	ldr	r3, [r3, #0]
 800104a:	681b      	ldr	r3, [r3, #0]
 800104c:	2b00      	cmp	r3, #0
 800104e:	d101      	bne.n	8001054 <prvResetNextTaskUnblockTime+0x14>
 8001050:	2301      	movs	r3, #1
 8001052:	e000      	b.n	8001056 <prvResetNextTaskUnblockTime+0x16>
 8001054:	2300      	movs	r3, #0
 8001056:	2b00      	cmp	r3, #0
 8001058:	d004      	beq.n	8001064 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800105a:	4b0a      	ldr	r3, [pc, #40]	; (8001084 <prvResetNextTaskUnblockTime+0x44>)
 800105c:	f04f 32ff 	mov.w	r2, #4294967295
 8001060:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8001062:	e008      	b.n	8001076 <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8001064:	4b06      	ldr	r3, [pc, #24]	; (8001080 <prvResetNextTaskUnblockTime+0x40>)
 8001066:	681b      	ldr	r3, [r3, #0]
 8001068:	68db      	ldr	r3, [r3, #12]
 800106a:	68db      	ldr	r3, [r3, #12]
 800106c:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	685b      	ldr	r3, [r3, #4]
 8001072:	4a04      	ldr	r2, [pc, #16]	; (8001084 <prvResetNextTaskUnblockTime+0x44>)
 8001074:	6013      	str	r3, [r2, #0]
}
 8001076:	bf00      	nop
 8001078:	370c      	adds	r7, #12
 800107a:	46bd      	mov	sp, r7
 800107c:	bc80      	pop	{r7}
 800107e:	4770      	bx	lr
 8001080:	200000dc 	.word	0x200000dc
 8001084:	20000144 	.word	0x20000144

08001088 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8001088:	b580      	push	{r7, lr}
 800108a:	b084      	sub	sp, #16
 800108c:	af00      	add	r7, sp, #0
 800108e:	6078      	str	r0, [r7, #4]
 8001090:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8001092:	4b21      	ldr	r3, [pc, #132]	; (8001118 <prvAddCurrentTaskToDelayedList+0x90>)
 8001094:	681b      	ldr	r3, [r3, #0]
 8001096:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8001098:	4b20      	ldr	r3, [pc, #128]	; (800111c <prvAddCurrentTaskToDelayedList+0x94>)
 800109a:	681b      	ldr	r3, [r3, #0]
 800109c:	3304      	adds	r3, #4
 800109e:	4618      	mov	r0, r3
 80010a0:	f7ff fc03 	bl	80008aa <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80010aa:	d10a      	bne.n	80010c2 <prvAddCurrentTaskToDelayedList+0x3a>
 80010ac:	683b      	ldr	r3, [r7, #0]
 80010ae:	2b00      	cmp	r3, #0
 80010b0:	d007      	beq.n	80010c2 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80010b2:	4b1a      	ldr	r3, [pc, #104]	; (800111c <prvAddCurrentTaskToDelayedList+0x94>)
 80010b4:	681b      	ldr	r3, [r3, #0]
 80010b6:	3304      	adds	r3, #4
 80010b8:	4619      	mov	r1, r3
 80010ba:	4819      	ldr	r0, [pc, #100]	; (8001120 <prvAddCurrentTaskToDelayedList+0x98>)
 80010bc:	f7ff fb9a 	bl	80007f4 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80010c0:	e026      	b.n	8001110 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80010c2:	68fa      	ldr	r2, [r7, #12]
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	4413      	add	r3, r2
 80010c8:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80010ca:	4b14      	ldr	r3, [pc, #80]	; (800111c <prvAddCurrentTaskToDelayedList+0x94>)
 80010cc:	681b      	ldr	r3, [r3, #0]
 80010ce:	68ba      	ldr	r2, [r7, #8]
 80010d0:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80010d2:	68ba      	ldr	r2, [r7, #8]
 80010d4:	68fb      	ldr	r3, [r7, #12]
 80010d6:	429a      	cmp	r2, r3
 80010d8:	d209      	bcs.n	80010ee <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80010da:	4b12      	ldr	r3, [pc, #72]	; (8001124 <prvAddCurrentTaskToDelayedList+0x9c>)
 80010dc:	681a      	ldr	r2, [r3, #0]
 80010de:	4b0f      	ldr	r3, [pc, #60]	; (800111c <prvAddCurrentTaskToDelayedList+0x94>)
 80010e0:	681b      	ldr	r3, [r3, #0]
 80010e2:	3304      	adds	r3, #4
 80010e4:	4619      	mov	r1, r3
 80010e6:	4610      	mov	r0, r2
 80010e8:	f7ff fba7 	bl	800083a <vListInsert>
}
 80010ec:	e010      	b.n	8001110 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80010ee:	4b0e      	ldr	r3, [pc, #56]	; (8001128 <prvAddCurrentTaskToDelayedList+0xa0>)
 80010f0:	681a      	ldr	r2, [r3, #0]
 80010f2:	4b0a      	ldr	r3, [pc, #40]	; (800111c <prvAddCurrentTaskToDelayedList+0x94>)
 80010f4:	681b      	ldr	r3, [r3, #0]
 80010f6:	3304      	adds	r3, #4
 80010f8:	4619      	mov	r1, r3
 80010fa:	4610      	mov	r0, r2
 80010fc:	f7ff fb9d 	bl	800083a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8001100:	4b0a      	ldr	r3, [pc, #40]	; (800112c <prvAddCurrentTaskToDelayedList+0xa4>)
 8001102:	681b      	ldr	r3, [r3, #0]
 8001104:	68ba      	ldr	r2, [r7, #8]
 8001106:	429a      	cmp	r2, r3
 8001108:	d202      	bcs.n	8001110 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800110a:	4a08      	ldr	r2, [pc, #32]	; (800112c <prvAddCurrentTaskToDelayedList+0xa4>)
 800110c:	68bb      	ldr	r3, [r7, #8]
 800110e:	6013      	str	r3, [r2, #0]
}
 8001110:	bf00      	nop
 8001112:	3710      	adds	r7, #16
 8001114:	46bd      	mov	sp, r7
 8001116:	bd80      	pop	{r7, pc}
 8001118:	20000128 	.word	0x20000128
 800111c:	2000004c 	.word	0x2000004c
 8001120:	20000110 	.word	0x20000110
 8001124:	200000e0 	.word	0x200000e0
 8001128:	200000dc 	.word	0x200000dc
 800112c:	20000144 	.word	0x20000144

08001130 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8001130:	b480      	push	{r7}
 8001132:	b085      	sub	sp, #20
 8001134:	af00      	add	r7, sp, #0
 8001136:	60f8      	str	r0, [r7, #12]
 8001138:	60b9      	str	r1, [r7, #8]
 800113a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 800113c:	68fb      	ldr	r3, [r7, #12]
 800113e:	3b04      	subs	r3, #4
 8001140:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8001142:	68fb      	ldr	r3, [r7, #12]
 8001144:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001148:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800114a:	68fb      	ldr	r3, [r7, #12]
 800114c:	3b04      	subs	r3, #4
 800114e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8001150:	68bb      	ldr	r3, [r7, #8]
 8001152:	f023 0201 	bic.w	r2, r3, #1
 8001156:	68fb      	ldr	r3, [r7, #12]
 8001158:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800115a:	68fb      	ldr	r3, [r7, #12]
 800115c:	3b04      	subs	r3, #4
 800115e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8001160:	4a08      	ldr	r2, [pc, #32]	; (8001184 <pxPortInitialiseStack+0x54>)
 8001162:	68fb      	ldr	r3, [r7, #12]
 8001164:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8001166:	68fb      	ldr	r3, [r7, #12]
 8001168:	3b14      	subs	r3, #20
 800116a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800116c:	687a      	ldr	r2, [r7, #4]
 800116e:	68fb      	ldr	r3, [r7, #12]
 8001170:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8001172:	68fb      	ldr	r3, [r7, #12]
 8001174:	3b20      	subs	r3, #32
 8001176:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8001178:	68fb      	ldr	r3, [r7, #12]
}
 800117a:	4618      	mov	r0, r3
 800117c:	3714      	adds	r7, #20
 800117e:	46bd      	mov	sp, r7
 8001180:	bc80      	pop	{r7}
 8001182:	4770      	bx	lr
 8001184:	08001189 	.word	0x08001189

08001188 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8001188:	b480      	push	{r7}
 800118a:	b083      	sub	sp, #12
 800118c:	af00      	add	r7, sp, #0
 800118e:	f04f 03bf 	mov.w	r3, #191	; 0xbf
 8001192:	f383 8811 	msr	BASEPRI, r3
 8001196:	f3bf 8f6f 	isb	sy
 800119a:	f3bf 8f4f 	dsb	sy
 800119e:	607b      	str	r3, [r7, #4]

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
	portDISABLE_INTERRUPTS();
	for( ;; );
 80011a0:	e7fe      	b.n	80011a0 <prvTaskExitError+0x18>
	...

080011b0 <SVC_Handler>:
}
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80011b0:	4b07      	ldr	r3, [pc, #28]	; (80011d0 <pxCurrentTCBConst2>)
 80011b2:	6819      	ldr	r1, [r3, #0]
 80011b4:	6808      	ldr	r0, [r1, #0]
 80011b6:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80011ba:	f380 8809 	msr	PSP, r0
 80011be:	f3bf 8f6f 	isb	sy
 80011c2:	f04f 0000 	mov.w	r0, #0
 80011c6:	f380 8811 	msr	BASEPRI, r0
 80011ca:	f04e 0e0d 	orr.w	lr, lr, #13
 80011ce:	4770      	bx	lr

080011d0 <pxCurrentTCBConst2>:
 80011d0:	2000004c 	.word	0x2000004c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80011d4:	bf00      	nop
 80011d6:	bf00      	nop

080011d8 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 80011d8:	4806      	ldr	r0, [pc, #24]	; (80011f4 <prvPortStartFirstTask+0x1c>)
 80011da:	6800      	ldr	r0, [r0, #0]
 80011dc:	6800      	ldr	r0, [r0, #0]
 80011de:	f380 8808 	msr	MSP, r0
 80011e2:	b662      	cpsie	i
 80011e4:	b661      	cpsie	f
 80011e6:	f3bf 8f4f 	dsb	sy
 80011ea:	f3bf 8f6f 	isb	sy
 80011ee:	df00      	svc	0
 80011f0:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80011f2:	bf00      	nop
 80011f4:	e000ed08 	.word	0xe000ed08

080011f8 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80011f8:	b580      	push	{r7, lr}
 80011fa:	af00      	add	r7, sp, #0
		*pucFirstUserPriorityRegister = ulOriginalPriority;
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80011fc:	4b0b      	ldr	r3, [pc, #44]	; (800122c <xPortStartScheduler+0x34>)
 80011fe:	681b      	ldr	r3, [r3, #0]
 8001200:	4a0a      	ldr	r2, [pc, #40]	; (800122c <xPortStartScheduler+0x34>)
 8001202:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8001206:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8001208:	4b08      	ldr	r3, [pc, #32]	; (800122c <xPortStartScheduler+0x34>)
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	4a07      	ldr	r2, [pc, #28]	; (800122c <xPortStartScheduler+0x34>)
 800120e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001212:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8001214:	f000 f890 	bl	8001338 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8001218:	4b05      	ldr	r3, [pc, #20]	; (8001230 <xPortStartScheduler+0x38>)
 800121a:	2200      	movs	r2, #0
 800121c:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800121e:	f7ff ffdb 	bl	80011d8 <prvPortStartFirstTask>

	/* Should never get here as the tasks will now be executing!  Call the task
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS. */
	prvTaskExitError();
 8001222:	f7ff ffb1 	bl	8001188 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8001226:	2300      	movs	r3, #0
}
 8001228:	4618      	mov	r0, r3
 800122a:	bd80      	pop	{r7, pc}
 800122c:	e000ed20 	.word	0xe000ed20
 8001230:	20000000 	.word	0x20000000

08001234 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8001234:	b480      	push	{r7}
 8001236:	b083      	sub	sp, #12
 8001238:	af00      	add	r7, sp, #0
 800123a:	f04f 03bf 	mov.w	r3, #191	; 0xbf
 800123e:	f383 8811 	msr	BASEPRI, r3
 8001242:	f3bf 8f6f 	isb	sy
 8001246:	f3bf 8f4f 	dsb	sy
 800124a:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800124c:	4b04      	ldr	r3, [pc, #16]	; (8001260 <vPortEnterCritical+0x2c>)
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	3301      	adds	r3, #1
 8001252:	4a03      	ldr	r2, [pc, #12]	; (8001260 <vPortEnterCritical+0x2c>)
 8001254:	6013      	str	r3, [r2, #0]
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
	}
}
 8001256:	bf00      	nop
 8001258:	370c      	adds	r7, #12
 800125a:	46bd      	mov	sp, r7
 800125c:	bc80      	pop	{r7}
 800125e:	4770      	bx	lr
 8001260:	20000000 	.word	0x20000000

08001264 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8001264:	b480      	push	{r7}
 8001266:	b083      	sub	sp, #12
 8001268:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
	uxCriticalNesting--;
 800126a:	4b09      	ldr	r3, [pc, #36]	; (8001290 <vPortExitCritical+0x2c>)
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	3b01      	subs	r3, #1
 8001270:	4a07      	ldr	r2, [pc, #28]	; (8001290 <vPortExitCritical+0x2c>)
 8001272:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8001274:	4b06      	ldr	r3, [pc, #24]	; (8001290 <vPortExitCritical+0x2c>)
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	2b00      	cmp	r3, #0
 800127a:	d104      	bne.n	8001286 <vPortExitCritical+0x22>
 800127c:	2300      	movs	r3, #0
 800127e:	607b      	str	r3, [r7, #4]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 8001286:	bf00      	nop
 8001288:	370c      	adds	r7, #12
 800128a:	46bd      	mov	sp, r7
 800128c:	bc80      	pop	{r7}
 800128e:	4770      	bx	lr
 8001290:	20000000 	.word	0x20000000
	...

080012a0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80012a0:	f3ef 8009 	mrs	r0, PSP
 80012a4:	f3bf 8f6f 	isb	sy
 80012a8:	4b0d      	ldr	r3, [pc, #52]	; (80012e0 <pxCurrentTCBConst>)
 80012aa:	681a      	ldr	r2, [r3, #0]
 80012ac:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80012b0:	6010      	str	r0, [r2, #0]
 80012b2:	e92d 4008 	stmdb	sp!, {r3, lr}
 80012b6:	f04f 00bf 	mov.w	r0, #191	; 0xbf
 80012ba:	f380 8811 	msr	BASEPRI, r0
 80012be:	f7ff fdcd 	bl	8000e5c <vTaskSwitchContext>
 80012c2:	f04f 0000 	mov.w	r0, #0
 80012c6:	f380 8811 	msr	BASEPRI, r0
 80012ca:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80012ce:	6819      	ldr	r1, [r3, #0]
 80012d0:	6808      	ldr	r0, [r1, #0]
 80012d2:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80012d6:	f380 8809 	msr	PSP, r0
 80012da:	f3bf 8f6f 	isb	sy
 80012de:	4770      	bx	lr

080012e0 <pxCurrentTCBConst>:
 80012e0:	2000004c 	.word	0x2000004c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80012e4:	bf00      	nop
 80012e6:	bf00      	nop

080012e8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80012e8:	b580      	push	{r7, lr}
 80012ea:	b082      	sub	sp, #8
 80012ec:	af00      	add	r7, sp, #0
	__asm volatile
 80012ee:	f04f 03bf 	mov.w	r3, #191	; 0xbf
 80012f2:	f383 8811 	msr	BASEPRI, r3
 80012f6:	f3bf 8f6f 	isb	sy
 80012fa:	f3bf 8f4f 	dsb	sy
 80012fe:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8001300:	f7ff fd0e 	bl	8000d20 <xTaskIncrementTick>
 8001304:	4603      	mov	r3, r0
 8001306:	2b00      	cmp	r3, #0
 8001308:	d003      	beq.n	8001312 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800130a:	4b09      	ldr	r3, [pc, #36]	; (8001330 <SysTick_Handler+0x48>)
 800130c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001310:	601a      	str	r2, [r3, #0]
 8001312:	2300      	movs	r3, #0
 8001314:	603b      	str	r3, [r7, #0]
	__asm volatile
 8001316:	683b      	ldr	r3, [r7, #0]
 8001318:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();

	/******************************/
	TIMEOUT.tick_ms.count_tick++;
 800131c:	4b05      	ldr	r3, [pc, #20]	; (8001334 <SysTick_Handler+0x4c>)
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	3301      	adds	r3, #1
 8001322:	4a04      	ldr	r2, [pc, #16]	; (8001334 <SysTick_Handler+0x4c>)
 8001324:	6013      	str	r3, [r2, #0]
	/******************************/
}
 8001326:	bf00      	nop
 8001328:	3708      	adds	r7, #8
 800132a:	46bd      	mov	sp, r7
 800132c:	bd80      	pop	{r7, pc}
 800132e:	bf00      	nop
 8001330:	e000ed04 	.word	0xe000ed04
 8001334:	20000028 	.word	0x20000028

08001338 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8001338:	b480      	push	{r7}
 800133a:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800133c:	4b04      	ldr	r3, [pc, #16]	; (8001350 <vPortSetupTimerInterrupt+0x18>)
 800133e:	4a05      	ldr	r2, [pc, #20]	; (8001354 <vPortSetupTimerInterrupt+0x1c>)
 8001340:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8001342:	4b05      	ldr	r3, [pc, #20]	; (8001358 <vPortSetupTimerInterrupt+0x20>)
 8001344:	2207      	movs	r2, #7
 8001346:	601a      	str	r2, [r3, #0]
}
 8001348:	bf00      	nop
 800134a:	46bd      	mov	sp, r7
 800134c:	bc80      	pop	{r7}
 800134e:	4770      	bx	lr
 8001350:	e000e014 	.word	0xe000e014
 8001354:	0001193f 	.word	0x0001193f
 8001358:	e000e010 	.word	0xe000e010

0800135c <pvPortMalloc>:
	pxIterator->pxNextFreeBlock = pxBlockToInsert;									\
}
/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800135c:	b580      	push	{r7, lr}
 800135e:	b088      	sub	sp, #32
 8001360:	af00      	add	r7, sp, #0
 8001362:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
static BaseType_t xHeapHasBeenInitialised = pdFALSE;
void *pvReturn = NULL;
 8001364:	2300      	movs	r3, #0
 8001366:	617b      	str	r3, [r7, #20]

	vTaskSuspendAll();
 8001368:	f7ff fc3e 	bl	8000be8 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( xHeapHasBeenInitialised == pdFALSE )
 800136c:	4b3e      	ldr	r3, [pc, #248]	; (8001468 <pvPortMalloc+0x10c>)
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	2b00      	cmp	r3, #0
 8001372:	d104      	bne.n	800137e <pvPortMalloc+0x22>
		{
			prvHeapInit();
 8001374:	f000 f8ba 	bl	80014ec <prvHeapInit>
			xHeapHasBeenInitialised = pdTRUE;
 8001378:	4b3b      	ldr	r3, [pc, #236]	; (8001468 <pvPortMalloc+0x10c>)
 800137a:	2201      	movs	r2, #1
 800137c:	601a      	str	r2, [r3, #0]
		}

		/* The wanted size is increased so it can contain a BlockLink_t
		structure in addition to the requested amount of bytes. */
		if( xWantedSize > 0 )
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	2b00      	cmp	r3, #0
 8001382:	d00e      	beq.n	80013a2 <pvPortMalloc+0x46>
		{
			xWantedSize += heapSTRUCT_SIZE;
 8001384:	2308      	movs	r3, #8
 8001386:	461a      	mov	r2, r3
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	4413      	add	r3, r2
 800138c:	607b      	str	r3, [r7, #4]

			/* Ensure that blocks are always aligned to the required number of bytes. */
			if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0 )
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	f003 0307 	and.w	r3, r3, #7
 8001394:	2b00      	cmp	r3, #0
 8001396:	d004      	beq.n	80013a2 <pvPortMalloc+0x46>
			{
				/* Byte alignment required. */
				xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	f023 0307 	bic.w	r3, r3, #7
 800139e:	3308      	adds	r3, #8
 80013a0:	607b      	str	r3, [r7, #4]
			}
		}

		if( ( xWantedSize > 0 ) && ( xWantedSize < configADJUSTED_HEAP_SIZE ) )
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	2b00      	cmp	r3, #0
 80013a6:	d057      	beq.n	8001458 <pvPortMalloc+0xfc>
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	f241 32f7 	movw	r2, #5111	; 0x13f7
 80013ae:	4293      	cmp	r3, r2
 80013b0:	d852      	bhi.n	8001458 <pvPortMalloc+0xfc>
		{
			/* Blocks are stored in byte order - traverse the list from the start
			(smallest) block until one of adequate size is found. */
			pxPreviousBlock = &xStart;
 80013b2:	4b2e      	ldr	r3, [pc, #184]	; (800146c <pvPortMalloc+0x110>)
 80013b4:	61bb      	str	r3, [r7, #24]
			pxBlock = xStart.pxNextFreeBlock;
 80013b6:	4b2d      	ldr	r3, [pc, #180]	; (800146c <pvPortMalloc+0x110>)
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	61fb      	str	r3, [r7, #28]
			while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80013bc:	e004      	b.n	80013c8 <pvPortMalloc+0x6c>
			{
				pxPreviousBlock = pxBlock;
 80013be:	69fb      	ldr	r3, [r7, #28]
 80013c0:	61bb      	str	r3, [r7, #24]
				pxBlock = pxBlock->pxNextFreeBlock;
 80013c2:	69fb      	ldr	r3, [r7, #28]
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	61fb      	str	r3, [r7, #28]
			while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80013c8:	69fb      	ldr	r3, [r7, #28]
 80013ca:	685b      	ldr	r3, [r3, #4]
 80013cc:	687a      	ldr	r2, [r7, #4]
 80013ce:	429a      	cmp	r2, r3
 80013d0:	d903      	bls.n	80013da <pvPortMalloc+0x7e>
 80013d2:	69fb      	ldr	r3, [r7, #28]
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	2b00      	cmp	r3, #0
 80013d8:	d1f1      	bne.n	80013be <pvPortMalloc+0x62>
			}

			/* If we found the end marker then a block of adequate size was not found. */
			if( pxBlock != &xEnd )
 80013da:	69fb      	ldr	r3, [r7, #28]
 80013dc:	4a24      	ldr	r2, [pc, #144]	; (8001470 <pvPortMalloc+0x114>)
 80013de:	4293      	cmp	r3, r2
 80013e0:	d03a      	beq.n	8001458 <pvPortMalloc+0xfc>
			{
				/* Return the memory space - jumping over the BlockLink_t structure
				at its start. */
				pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + heapSTRUCT_SIZE );
 80013e2:	69bb      	ldr	r3, [r7, #24]
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	2208      	movs	r2, #8
 80013e8:	4413      	add	r3, r2
 80013ea:	617b      	str	r3, [r7, #20]

				/* This block is being returned for use so must be taken out of the
				list of free blocks. */
				pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80013ec:	69fb      	ldr	r3, [r7, #28]
 80013ee:	681a      	ldr	r2, [r3, #0]
 80013f0:	69bb      	ldr	r3, [r7, #24]
 80013f2:	601a      	str	r2, [r3, #0]

				/* If the block is larger than required it can be split into two. */
				if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80013f4:	69fb      	ldr	r3, [r7, #28]
 80013f6:	685a      	ldr	r2, [r3, #4]
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	1ad3      	subs	r3, r2, r3
 80013fc:	2208      	movs	r2, #8
 80013fe:	0052      	lsls	r2, r2, #1
 8001400:	4293      	cmp	r3, r2
 8001402:	d922      	bls.n	800144a <pvPortMalloc+0xee>
				{
					/* This block is to be split into two.  Create a new block
					following the number of bytes requested. The void cast is
					used to prevent byte alignment warnings from the compiler. */
					pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8001404:	69fa      	ldr	r2, [r7, #28]
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	4413      	add	r3, r2
 800140a:	60fb      	str	r3, [r7, #12]

					/* Calculate the sizes of two blocks split from the single
					block. */
					pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800140c:	69fb      	ldr	r3, [r7, #28]
 800140e:	685a      	ldr	r2, [r3, #4]
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	1ad2      	subs	r2, r2, r3
 8001414:	68fb      	ldr	r3, [r7, #12]
 8001416:	605a      	str	r2, [r3, #4]
					pxBlock->xBlockSize = xWantedSize;
 8001418:	69fb      	ldr	r3, [r7, #28]
 800141a:	687a      	ldr	r2, [r7, #4]
 800141c:	605a      	str	r2, [r3, #4]

					/* Insert the new block into the list of free blocks. */
					prvInsertBlockIntoFreeList( ( pxNewBlockLink ) );
 800141e:	68fb      	ldr	r3, [r7, #12]
 8001420:	685b      	ldr	r3, [r3, #4]
 8001422:	60bb      	str	r3, [r7, #8]
 8001424:	4b11      	ldr	r3, [pc, #68]	; (800146c <pvPortMalloc+0x110>)
 8001426:	613b      	str	r3, [r7, #16]
 8001428:	e002      	b.n	8001430 <pvPortMalloc+0xd4>
 800142a:	693b      	ldr	r3, [r7, #16]
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	613b      	str	r3, [r7, #16]
 8001430:	693b      	ldr	r3, [r7, #16]
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	685b      	ldr	r3, [r3, #4]
 8001436:	68ba      	ldr	r2, [r7, #8]
 8001438:	429a      	cmp	r2, r3
 800143a:	d8f6      	bhi.n	800142a <pvPortMalloc+0xce>
 800143c:	693b      	ldr	r3, [r7, #16]
 800143e:	681a      	ldr	r2, [r3, #0]
 8001440:	68fb      	ldr	r3, [r7, #12]
 8001442:	601a      	str	r2, [r3, #0]
 8001444:	693b      	ldr	r3, [r7, #16]
 8001446:	68fa      	ldr	r2, [r7, #12]
 8001448:	601a      	str	r2, [r3, #0]
				}

				xFreeBytesRemaining -= pxBlock->xBlockSize;
 800144a:	4b0a      	ldr	r3, [pc, #40]	; (8001474 <pvPortMalloc+0x118>)
 800144c:	681a      	ldr	r2, [r3, #0]
 800144e:	69fb      	ldr	r3, [r7, #28]
 8001450:	685b      	ldr	r3, [r3, #4]
 8001452:	1ad3      	subs	r3, r2, r3
 8001454:	4a07      	ldr	r2, [pc, #28]	; (8001474 <pvPortMalloc+0x118>)
 8001456:	6013      	str	r3, [r2, #0]
			}
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8001458:	f7ff fbd4 	bl	8000c04 <xTaskResumeAll>
			vApplicationMallocFailedHook();
		}
	}
	#endif

	return pvReturn;
 800145c:	697b      	ldr	r3, [r7, #20]
}
 800145e:	4618      	mov	r0, r3
 8001460:	3720      	adds	r7, #32
 8001462:	46bd      	mov	sp, r7
 8001464:	bd80      	pop	{r7, pc}
 8001466:	bf00      	nop
 8001468:	20001560 	.word	0x20001560
 800146c:	20001550 	.word	0x20001550
 8001470:	20001558 	.word	0x20001558
 8001474:	20000004 	.word	0x20000004

08001478 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8001478:	b580      	push	{r7, lr}
 800147a:	b086      	sub	sp, #24
 800147c:	af00      	add	r7, sp, #0
 800147e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	613b      	str	r3, [r7, #16]
BlockLink_t *pxLink;

	if( pv != NULL )
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	2b00      	cmp	r3, #0
 8001488:	d027      	beq.n	80014da <vPortFree+0x62>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= heapSTRUCT_SIZE;
 800148a:	2308      	movs	r3, #8
 800148c:	425b      	negs	r3, r3
 800148e:	693a      	ldr	r2, [r7, #16]
 8001490:	4413      	add	r3, r2
 8001492:	613b      	str	r3, [r7, #16]

		/* This unexpected casting is to keep some compilers from issuing
		byte alignment warnings. */
		pxLink = ( void * ) puc;
 8001494:	693b      	ldr	r3, [r7, #16]
 8001496:	60fb      	str	r3, [r7, #12]

		vTaskSuspendAll();
 8001498:	f7ff fba6 	bl	8000be8 <vTaskSuspendAll>
		{
			/* Add this block to the list of free blocks. */
			prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800149c:	68fb      	ldr	r3, [r7, #12]
 800149e:	685b      	ldr	r3, [r3, #4]
 80014a0:	60bb      	str	r3, [r7, #8]
 80014a2:	4b10      	ldr	r3, [pc, #64]	; (80014e4 <vPortFree+0x6c>)
 80014a4:	617b      	str	r3, [r7, #20]
 80014a6:	e002      	b.n	80014ae <vPortFree+0x36>
 80014a8:	697b      	ldr	r3, [r7, #20]
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	617b      	str	r3, [r7, #20]
 80014ae:	697b      	ldr	r3, [r7, #20]
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	685b      	ldr	r3, [r3, #4]
 80014b4:	68ba      	ldr	r2, [r7, #8]
 80014b6:	429a      	cmp	r2, r3
 80014b8:	d8f6      	bhi.n	80014a8 <vPortFree+0x30>
 80014ba:	697b      	ldr	r3, [r7, #20]
 80014bc:	681a      	ldr	r2, [r3, #0]
 80014be:	68fb      	ldr	r3, [r7, #12]
 80014c0:	601a      	str	r2, [r3, #0]
 80014c2:	697b      	ldr	r3, [r7, #20]
 80014c4:	68fa      	ldr	r2, [r7, #12]
 80014c6:	601a      	str	r2, [r3, #0]
			xFreeBytesRemaining += pxLink->xBlockSize;
 80014c8:	68fb      	ldr	r3, [r7, #12]
 80014ca:	685a      	ldr	r2, [r3, #4]
 80014cc:	4b06      	ldr	r3, [pc, #24]	; (80014e8 <vPortFree+0x70>)
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	4413      	add	r3, r2
 80014d2:	4a05      	ldr	r2, [pc, #20]	; (80014e8 <vPortFree+0x70>)
 80014d4:	6013      	str	r3, [r2, #0]
			traceFREE( pv, pxLink->xBlockSize );
		}
		( void ) xTaskResumeAll();
 80014d6:	f7ff fb95 	bl	8000c04 <xTaskResumeAll>
	}
}
 80014da:	bf00      	nop
 80014dc:	3718      	adds	r7, #24
 80014de:	46bd      	mov	sp, r7
 80014e0:	bd80      	pop	{r7, pc}
 80014e2:	bf00      	nop
 80014e4:	20001550 	.word	0x20001550
 80014e8:	20000004 	.word	0x20000004

080014ec <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80014ec:	b480      	push	{r7}
 80014ee:	b083      	sub	sp, #12
 80014f0:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;

	/* Ensure the heap starts on a correctly aligned boundary. */
	pucAlignedHeap = ( uint8_t * ) ( ( ( portPOINTER_SIZE_TYPE ) &ucHeap[ portBYTE_ALIGNMENT ] ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) );
 80014f2:	4b0f      	ldr	r3, [pc, #60]	; (8001530 <prvHeapInit+0x44>)
 80014f4:	f023 0307 	bic.w	r3, r3, #7
 80014f8:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80014fa:	4a0e      	ldr	r2, [pc, #56]	; (8001534 <prvHeapInit+0x48>)
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8001500:	4b0c      	ldr	r3, [pc, #48]	; (8001534 <prvHeapInit+0x48>)
 8001502:	2200      	movs	r2, #0
 8001504:	605a      	str	r2, [r3, #4]

	/* xEnd is used to mark the end of the list of free blocks. */
	xEnd.xBlockSize = configADJUSTED_HEAP_SIZE;
 8001506:	4b0c      	ldr	r3, [pc, #48]	; (8001538 <prvHeapInit+0x4c>)
 8001508:	f241 32f8 	movw	r2, #5112	; 0x13f8
 800150c:	605a      	str	r2, [r3, #4]
	xEnd.pxNextFreeBlock = NULL;
 800150e:	4b0a      	ldr	r3, [pc, #40]	; (8001538 <prvHeapInit+0x4c>)
 8001510:	2200      	movs	r2, #0
 8001512:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = configADJUSTED_HEAP_SIZE;
 8001518:	683b      	ldr	r3, [r7, #0]
 800151a:	f241 32f8 	movw	r2, #5112	; 0x13f8
 800151e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = &xEnd;
 8001520:	683b      	ldr	r3, [r7, #0]
 8001522:	4a05      	ldr	r2, [pc, #20]	; (8001538 <prvHeapInit+0x4c>)
 8001524:	601a      	str	r2, [r3, #0]
}
 8001526:	bf00      	nop
 8001528:	370c      	adds	r7, #12
 800152a:	46bd      	mov	sp, r7
 800152c:	bc80      	pop	{r7}
 800152e:	4770      	bx	lr
 8001530:	20000158 	.word	0x20000158
 8001534:	20001550 	.word	0x20001550
 8001538:	20001558 	.word	0x20001558

0800153c <GPIO_Init>:
  * @param  GPIO_InitStruct: pointer to a GPIO_InitTypeDef structure that
  *         contains the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void GPIO_Init(GPIO_TypeDef* GPIOx, GPIO_InitTypeDef* GPIO_InitStruct)
{
 800153c:	b480      	push	{r7}
 800153e:	b089      	sub	sp, #36	; 0x24
 8001540:	af00      	add	r7, sp, #0
 8001542:	6078      	str	r0, [r7, #4]
 8001544:	6039      	str	r1, [r7, #0]
  uint32_t currentmode = 0x00, currentpin = 0x00, pinpos = 0x00, pos = 0x00;
 8001546:	2300      	movs	r3, #0
 8001548:	61fb      	str	r3, [r7, #28]
 800154a:	2300      	movs	r3, #0
 800154c:	613b      	str	r3, [r7, #16]
 800154e:	2300      	movs	r3, #0
 8001550:	61bb      	str	r3, [r7, #24]
 8001552:	2300      	movs	r3, #0
 8001554:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg = 0x00, pinmask = 0x00;
 8001556:	2300      	movs	r3, #0
 8001558:	617b      	str	r3, [r7, #20]
 800155a:	2300      	movs	r3, #0
 800155c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PIN(GPIO_InitStruct->GPIO_Pin));  
  
/*---------------------------- GPIO Mode Configuration -----------------------*/
  currentmode = ((uint32_t)GPIO_InitStruct->GPIO_Mode) & ((uint32_t)0x0F);
 800155e:	683b      	ldr	r3, [r7, #0]
 8001560:	78db      	ldrb	r3, [r3, #3]
 8001562:	f003 030f 	and.w	r3, r3, #15
 8001566:	61fb      	str	r3, [r7, #28]
  if ((((uint32_t)GPIO_InitStruct->GPIO_Mode) & ((uint32_t)0x10)) != 0x00)
 8001568:	683b      	ldr	r3, [r7, #0]
 800156a:	78db      	ldrb	r3, [r3, #3]
 800156c:	f003 0310 	and.w	r3, r3, #16
 8001570:	2b00      	cmp	r3, #0
 8001572:	d005      	beq.n	8001580 <GPIO_Init+0x44>
  { 
    /* Check the parameters */
    assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));
    /* Output mode */
    currentmode |= (uint32_t)GPIO_InitStruct->GPIO_Speed;
 8001574:	683b      	ldr	r3, [r7, #0]
 8001576:	789b      	ldrb	r3, [r3, #2]
 8001578:	461a      	mov	r2, r3
 800157a:	69fb      	ldr	r3, [r7, #28]
 800157c:	4313      	orrs	r3, r2
 800157e:	61fb      	str	r3, [r7, #28]
  }
/*---------------------------- GPIO CRL Configuration ------------------------*/
  /* Configure the eight low port pins */
  if (((uint32_t)GPIO_InitStruct->GPIO_Pin & ((uint32_t)0x00FF)) != 0x00)
 8001580:	683b      	ldr	r3, [r7, #0]
 8001582:	881b      	ldrh	r3, [r3, #0]
 8001584:	b2db      	uxtb	r3, r3
 8001586:	2b00      	cmp	r3, #0
 8001588:	d044      	beq.n	8001614 <GPIO_Init+0xd8>
  {
    tmpreg = GPIOx->CRL;
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	617b      	str	r3, [r7, #20]
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
 8001590:	2300      	movs	r3, #0
 8001592:	61bb      	str	r3, [r7, #24]
 8001594:	e038      	b.n	8001608 <GPIO_Init+0xcc>
    {
      pos = ((uint32_t)0x01) << pinpos;
 8001596:	2201      	movs	r2, #1
 8001598:	69bb      	ldr	r3, [r7, #24]
 800159a:	fa02 f303 	lsl.w	r3, r2, r3
 800159e:	60fb      	str	r3, [r7, #12]
      /* Get the port pins position */
      currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
 80015a0:	683b      	ldr	r3, [r7, #0]
 80015a2:	881b      	ldrh	r3, [r3, #0]
 80015a4:	461a      	mov	r2, r3
 80015a6:	68fb      	ldr	r3, [r7, #12]
 80015a8:	4013      	ands	r3, r2
 80015aa:	613b      	str	r3, [r7, #16]
      if (currentpin == pos)
 80015ac:	693a      	ldr	r2, [r7, #16]
 80015ae:	68fb      	ldr	r3, [r7, #12]
 80015b0:	429a      	cmp	r2, r3
 80015b2:	d126      	bne.n	8001602 <GPIO_Init+0xc6>
      {
        pos = pinpos << 2;
 80015b4:	69bb      	ldr	r3, [r7, #24]
 80015b6:	009b      	lsls	r3, r3, #2
 80015b8:	60fb      	str	r3, [r7, #12]
        /* Clear the corresponding low control register bits */
        pinmask = ((uint32_t)0x0F) << pos;
 80015ba:	220f      	movs	r2, #15
 80015bc:	68fb      	ldr	r3, [r7, #12]
 80015be:	fa02 f303 	lsl.w	r3, r2, r3
 80015c2:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~pinmask;
 80015c4:	68bb      	ldr	r3, [r7, #8]
 80015c6:	43db      	mvns	r3, r3
 80015c8:	697a      	ldr	r2, [r7, #20]
 80015ca:	4013      	ands	r3, r2
 80015cc:	617b      	str	r3, [r7, #20]
        /* Write the mode configuration in the corresponding bits */
        tmpreg |= (currentmode << pos);
 80015ce:	69fa      	ldr	r2, [r7, #28]
 80015d0:	68fb      	ldr	r3, [r7, #12]
 80015d2:	fa02 f303 	lsl.w	r3, r2, r3
 80015d6:	697a      	ldr	r2, [r7, #20]
 80015d8:	4313      	orrs	r3, r2
 80015da:	617b      	str	r3, [r7, #20]
        /* Reset the corresponding ODR bit */
        if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPD)
 80015dc:	683b      	ldr	r3, [r7, #0]
 80015de:	78db      	ldrb	r3, [r3, #3]
 80015e0:	2b28      	cmp	r3, #40	; 0x28
 80015e2:	d105      	bne.n	80015f0 <GPIO_Init+0xb4>
        {
          GPIOx->BRR = (((uint32_t)0x01) << pinpos);
 80015e4:	2201      	movs	r2, #1
 80015e6:	69bb      	ldr	r3, [r7, #24]
 80015e8:	409a      	lsls	r2, r3
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	615a      	str	r2, [r3, #20]
 80015ee:	e008      	b.n	8001602 <GPIO_Init+0xc6>
        }
        else
        {
          /* Set the corresponding ODR bit */
          if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPU)
 80015f0:	683b      	ldr	r3, [r7, #0]
 80015f2:	78db      	ldrb	r3, [r3, #3]
 80015f4:	2b48      	cmp	r3, #72	; 0x48
 80015f6:	d104      	bne.n	8001602 <GPIO_Init+0xc6>
          {
            GPIOx->BSRR = (((uint32_t)0x01) << pinpos);
 80015f8:	2201      	movs	r2, #1
 80015fa:	69bb      	ldr	r3, [r7, #24]
 80015fc:	409a      	lsls	r2, r3
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	611a      	str	r2, [r3, #16]
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
 8001602:	69bb      	ldr	r3, [r7, #24]
 8001604:	3301      	adds	r3, #1
 8001606:	61bb      	str	r3, [r7, #24]
 8001608:	69bb      	ldr	r3, [r7, #24]
 800160a:	2b07      	cmp	r3, #7
 800160c:	d9c3      	bls.n	8001596 <GPIO_Init+0x5a>
          }
        }
      }
    }
    GPIOx->CRL = tmpreg;
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	697a      	ldr	r2, [r7, #20]
 8001612:	601a      	str	r2, [r3, #0]
  }
/*---------------------------- GPIO CRH Configuration ------------------------*/
  /* Configure the eight high port pins */
  if (GPIO_InitStruct->GPIO_Pin > 0x00FF)
 8001614:	683b      	ldr	r3, [r7, #0]
 8001616:	881b      	ldrh	r3, [r3, #0]
 8001618:	2bff      	cmp	r3, #255	; 0xff
 800161a:	d946      	bls.n	80016aa <GPIO_Init+0x16e>
  {
    tmpreg = GPIOx->CRH;
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	685b      	ldr	r3, [r3, #4]
 8001620:	617b      	str	r3, [r7, #20]
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
 8001622:	2300      	movs	r3, #0
 8001624:	61bb      	str	r3, [r7, #24]
 8001626:	e03a      	b.n	800169e <GPIO_Init+0x162>
    {
      pos = (((uint32_t)0x01) << (pinpos + 0x08));
 8001628:	69bb      	ldr	r3, [r7, #24]
 800162a:	3308      	adds	r3, #8
 800162c:	2201      	movs	r2, #1
 800162e:	fa02 f303 	lsl.w	r3, r2, r3
 8001632:	60fb      	str	r3, [r7, #12]
      /* Get the port pins position */
      currentpin = ((GPIO_InitStruct->GPIO_Pin) & pos);
 8001634:	683b      	ldr	r3, [r7, #0]
 8001636:	881b      	ldrh	r3, [r3, #0]
 8001638:	461a      	mov	r2, r3
 800163a:	68fb      	ldr	r3, [r7, #12]
 800163c:	4013      	ands	r3, r2
 800163e:	613b      	str	r3, [r7, #16]
      if (currentpin == pos)
 8001640:	693a      	ldr	r2, [r7, #16]
 8001642:	68fb      	ldr	r3, [r7, #12]
 8001644:	429a      	cmp	r2, r3
 8001646:	d127      	bne.n	8001698 <GPIO_Init+0x15c>
      {
        pos = pinpos << 2;
 8001648:	69bb      	ldr	r3, [r7, #24]
 800164a:	009b      	lsls	r3, r3, #2
 800164c:	60fb      	str	r3, [r7, #12]
        /* Clear the corresponding high control register bits */
        pinmask = ((uint32_t)0x0F) << pos;
 800164e:	220f      	movs	r2, #15
 8001650:	68fb      	ldr	r3, [r7, #12]
 8001652:	fa02 f303 	lsl.w	r3, r2, r3
 8001656:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~pinmask;
 8001658:	68bb      	ldr	r3, [r7, #8]
 800165a:	43db      	mvns	r3, r3
 800165c:	697a      	ldr	r2, [r7, #20]
 800165e:	4013      	ands	r3, r2
 8001660:	617b      	str	r3, [r7, #20]
        /* Write the mode configuration in the corresponding bits */
        tmpreg |= (currentmode << pos);
 8001662:	69fa      	ldr	r2, [r7, #28]
 8001664:	68fb      	ldr	r3, [r7, #12]
 8001666:	fa02 f303 	lsl.w	r3, r2, r3
 800166a:	697a      	ldr	r2, [r7, #20]
 800166c:	4313      	orrs	r3, r2
 800166e:	617b      	str	r3, [r7, #20]
        /* Reset the corresponding ODR bit */
        if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPD)
 8001670:	683b      	ldr	r3, [r7, #0]
 8001672:	78db      	ldrb	r3, [r3, #3]
 8001674:	2b28      	cmp	r3, #40	; 0x28
 8001676:	d105      	bne.n	8001684 <GPIO_Init+0x148>
        {
          GPIOx->BRR = (((uint32_t)0x01) << (pinpos + 0x08));
 8001678:	69bb      	ldr	r3, [r7, #24]
 800167a:	3308      	adds	r3, #8
 800167c:	2201      	movs	r2, #1
 800167e:	409a      	lsls	r2, r3
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	615a      	str	r2, [r3, #20]
        }
        /* Set the corresponding ODR bit */
        if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPU)
 8001684:	683b      	ldr	r3, [r7, #0]
 8001686:	78db      	ldrb	r3, [r3, #3]
 8001688:	2b48      	cmp	r3, #72	; 0x48
 800168a:	d105      	bne.n	8001698 <GPIO_Init+0x15c>
        {
          GPIOx->BSRR = (((uint32_t)0x01) << (pinpos + 0x08));
 800168c:	69bb      	ldr	r3, [r7, #24]
 800168e:	3308      	adds	r3, #8
 8001690:	2201      	movs	r2, #1
 8001692:	409a      	lsls	r2, r3
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	611a      	str	r2, [r3, #16]
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
 8001698:	69bb      	ldr	r3, [r7, #24]
 800169a:	3301      	adds	r3, #1
 800169c:	61bb      	str	r3, [r7, #24]
 800169e:	69bb      	ldr	r3, [r7, #24]
 80016a0:	2b07      	cmp	r3, #7
 80016a2:	d9c1      	bls.n	8001628 <GPIO_Init+0xec>
        }
      }
    }
    GPIOx->CRH = tmpreg;
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	697a      	ldr	r2, [r7, #20]
 80016a8:	605a      	str	r2, [r3, #4]
  }
}
 80016aa:	bf00      	nop
 80016ac:	3724      	adds	r7, #36	; 0x24
 80016ae:	46bd      	mov	sp, r7
 80016b0:	bc80      	pop	{r7}
 80016b2:	4770      	bx	lr

080016b4 <GPIO_SetBits>:
  * @param  GPIO_Pin: specifies the port bits to be written.
  *   This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void GPIO_SetBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80016b4:	b480      	push	{r7}
 80016b6:	b083      	sub	sp, #12
 80016b8:	af00      	add	r7, sp, #0
 80016ba:	6078      	str	r0, [r7, #4]
 80016bc:	460b      	mov	r3, r1
 80016be:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  
  GPIOx->BSRR = GPIO_Pin;
 80016c0:	887a      	ldrh	r2, [r7, #2]
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	611a      	str	r2, [r3, #16]
}
 80016c6:	bf00      	nop
 80016c8:	370c      	adds	r7, #12
 80016ca:	46bd      	mov	sp, r7
 80016cc:	bc80      	pop	{r7}
 80016ce:	4770      	bx	lr

080016d0 <RCC_APB2PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB2PeriphClockCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
 80016d0:	b480      	push	{r7}
 80016d2:	b083      	sub	sp, #12
 80016d4:	af00      	add	r7, sp, #0
 80016d6:	6078      	str	r0, [r7, #4]
 80016d8:	460b      	mov	r3, r1
 80016da:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 80016dc:	78fb      	ldrb	r3, [r7, #3]
 80016de:	2b00      	cmp	r3, #0
 80016e0:	d006      	beq.n	80016f0 <RCC_APB2PeriphClockCmd+0x20>
  {
    RCC->APB2ENR |= RCC_APB2Periph;
 80016e2:	4b09      	ldr	r3, [pc, #36]	; (8001708 <RCC_APB2PeriphClockCmd+0x38>)
 80016e4:	699a      	ldr	r2, [r3, #24]
 80016e6:	4908      	ldr	r1, [pc, #32]	; (8001708 <RCC_APB2PeriphClockCmd+0x38>)
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	4313      	orrs	r3, r2
 80016ec:	618b      	str	r3, [r1, #24]
  }
  else
  {
    RCC->APB2ENR &= ~RCC_APB2Periph;
  }
}
 80016ee:	e006      	b.n	80016fe <RCC_APB2PeriphClockCmd+0x2e>
    RCC->APB2ENR &= ~RCC_APB2Periph;
 80016f0:	4b05      	ldr	r3, [pc, #20]	; (8001708 <RCC_APB2PeriphClockCmd+0x38>)
 80016f2:	699a      	ldr	r2, [r3, #24]
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	43db      	mvns	r3, r3
 80016f8:	4903      	ldr	r1, [pc, #12]	; (8001708 <RCC_APB2PeriphClockCmd+0x38>)
 80016fa:	4013      	ands	r3, r2
 80016fc:	618b      	str	r3, [r1, #24]
}
 80016fe:	bf00      	nop
 8001700:	370c      	adds	r7, #12
 8001702:	46bd      	mov	sp, r7
 8001704:	bc80      	pop	{r7}
 8001706:	4770      	bx	lr
 8001708:	40021000 	.word	0x40021000

0800170c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 800170c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001744 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8001710:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8001712:	e003      	b.n	800171c <LoopCopyDataInit>

08001714 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8001714:	4b0c      	ldr	r3, [pc, #48]	; (8001748 <LoopFillZerobss+0x18>)
	ldr	r3, [r3, r1]
 8001716:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8001718:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 800171a:	3104      	adds	r1, #4

0800171c <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 800171c:	480b      	ldr	r0, [pc, #44]	; (800174c <LoopFillZerobss+0x1c>)
	ldr	r3, =_edata
 800171e:	4b0c      	ldr	r3, [pc, #48]	; (8001750 <LoopFillZerobss+0x20>)
	adds	r2, r0, r1
 8001720:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8001722:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8001724:	d3f6      	bcc.n	8001714 <CopyDataInit>
	ldr	r2, =_sbss
 8001726:	4a0b      	ldr	r2, [pc, #44]	; (8001754 <LoopFillZerobss+0x24>)
	b	LoopFillZerobss
 8001728:	e002      	b.n	8001730 <LoopFillZerobss>

0800172a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 800172a:	2300      	movs	r3, #0
	str	r3, [r2], #4
 800172c:	f842 3b04 	str.w	r3, [r2], #4

08001730 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8001730:	4b09      	ldr	r3, [pc, #36]	; (8001758 <LoopFillZerobss+0x28>)
	cmp	r2, r3
 8001732:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8001734:	d3f9      	bcc.n	800172a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001736:	f000 f843 	bl	80017c0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800173a:	f000 f8fb 	bl	8001934 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800173e:	f000 f80e 	bl	800175e <main>
	bx	lr
 8001742:	4770      	bx	lr
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001744:	20010000 	.word	0x20010000
	ldr	r3, =_sidata
 8001748:	080019b4 	.word	0x080019b4
	ldr	r0, =_sdata
 800174c:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8001750:	20000008 	.word	0x20000008
	ldr	r2, =_sbss
 8001754:	20000008 	.word	0x20000008
	ldr	r3, = _ebss
 8001758:	200017a8 	.word	0x200017a8

0800175c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800175c:	e7fe      	b.n	800175c <ADC1_2_IRQHandler>

0800175e <main>:
#include <PROCESS/PROCESS.h>



int main(void)
{
 800175e:	b580      	push	{r7, lr}
 8001760:	af00      	add	r7, sp, #0
	PROCESS_init();
 8001762:	f7fe ff81 	bl	8000668 <PROCESS_init>
 8001766:	2300      	movs	r3, #0

//    while(1)
//    {
//    	PROCESS_app();
//    }
}
 8001768:	4618      	mov	r0, r3
 800176a:	bd80      	pop	{r7, pc}

0800176c <USART1_IRQHandler>:
/* Includes ------------------------------------------------------------------*/
#include "PROCESS/PROCESS.h"


void USART1_IRQHandler(void)
{
 800176c:	b480      	push	{r7}
 800176e:	af00      	add	r7, sp, #0

}
 8001770:	bf00      	nop
 8001772:	46bd      	mov	sp, r7
 8001774:	bc80      	pop	{r7}
 8001776:	4770      	bx	lr

08001778 <USART3_IRQHandler>:

void USART3_IRQHandler(void)
{
 8001778:	b480      	push	{r7}
 800177a:	af00      	add	r7, sp, #0

}
 800177c:	bf00      	nop
 800177e:	46bd      	mov	sp, r7
 8001780:	bc80      	pop	{r7}
 8001782:	4770      	bx	lr

08001784 <TIM2_IRQHandler>:
  * @brief  This function handles TIM2 exception.
  * @param  None
  * @retval None
  */
void TIM2_IRQHandler(void)
{
 8001784:	b480      	push	{r7}
 8001786:	af00      	add	r7, sp, #0

}
 8001788:	bf00      	nop
 800178a:	46bd      	mov	sp, r7
 800178c:	bc80      	pop	{r7}
 800178e:	4770      	bx	lr

08001790 <NMI_Handler>:
  * @brief  This function handles NMI exception.
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
 8001790:	b480      	push	{r7}
 8001792:	af00      	add	r7, sp, #0
}
 8001794:	bf00      	nop
 8001796:	46bd      	mov	sp, r7
 8001798:	bc80      	pop	{r7}
 800179a:	4770      	bx	lr

0800179c <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 800179c:	b480      	push	{r7}
 800179e:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
 80017a0:	e7fe      	b.n	80017a0 <HardFault_Handler+0x4>

080017a2 <MemManage_Handler>:
  * @brief  This function handles Memory Manage exception.
  * @param  None
  * @retval None
  */
void MemManage_Handler(void)
{
 80017a2:	b480      	push	{r7}
 80017a4:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
 80017a6:	e7fe      	b.n	80017a6 <MemManage_Handler+0x4>

080017a8 <BusFault_Handler>:
  * @brief  This function handles Bus Fault exception.
  * @param  None
  * @retval None
  */
void BusFault_Handler(void)
{
 80017a8:	b480      	push	{r7}
 80017aa:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
 80017ac:	e7fe      	b.n	80017ac <BusFault_Handler+0x4>

080017ae <UsageFault_Handler>:
  * @brief  This function handles Usage Fault exception.
  * @param  None
  * @retval None
  */
void UsageFault_Handler(void)
{
 80017ae:	b480      	push	{r7}
 80017b0:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
 80017b2:	e7fe      	b.n	80017b2 <UsageFault_Handler+0x4>

080017b4 <DebugMon_Handler>:
  * @brief  This function handles Debug Monitor exception.
  * @param  None
  * @retval None
  */
void DebugMon_Handler(void)
{
 80017b4:	b480      	push	{r7}
 80017b6:	af00      	add	r7, sp, #0
}
 80017b8:	bf00      	nop
 80017ba:	46bd      	mov	sp, r7
 80017bc:	bc80      	pop	{r7}
 80017be:	4770      	bx	lr

080017c0 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80017c0:	b580      	push	{r7, lr}
 80017c2:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 80017c4:	4b15      	ldr	r3, [pc, #84]	; (800181c <SystemInit+0x5c>)
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	4a14      	ldr	r2, [pc, #80]	; (800181c <SystemInit+0x5c>)
 80017ca:	f043 0301 	orr.w	r3, r3, #1
 80017ce:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#ifndef STM32F10X_CL
  RCC->CFGR &= (uint32_t)0xF8FF0000;
 80017d0:	4b12      	ldr	r3, [pc, #72]	; (800181c <SystemInit+0x5c>)
 80017d2:	685a      	ldr	r2, [r3, #4]
 80017d4:	4911      	ldr	r1, [pc, #68]	; (800181c <SystemInit+0x5c>)
 80017d6:	4b12      	ldr	r3, [pc, #72]	; (8001820 <SystemInit+0x60>)
 80017d8:	4013      	ands	r3, r2
 80017da:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= (uint32_t)0xF0FF0000;
#endif /* STM32F10X_CL */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 80017dc:	4b0f      	ldr	r3, [pc, #60]	; (800181c <SystemInit+0x5c>)
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	4a0e      	ldr	r2, [pc, #56]	; (800181c <SystemInit+0x5c>)
 80017e2:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 80017e6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80017ea:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 80017ec:	4b0b      	ldr	r3, [pc, #44]	; (800181c <SystemInit+0x5c>)
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	4a0a      	ldr	r2, [pc, #40]	; (800181c <SystemInit+0x5c>)
 80017f2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80017f6:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= (uint32_t)0xFF80FFFF;
 80017f8:	4b08      	ldr	r3, [pc, #32]	; (800181c <SystemInit+0x5c>)
 80017fa:	685b      	ldr	r3, [r3, #4]
 80017fc:	4a07      	ldr	r2, [pc, #28]	; (800181c <SystemInit+0x5c>)
 80017fe:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 8001802:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000;
 8001804:	4b05      	ldr	r3, [pc, #20]	; (800181c <SystemInit+0x5c>)
 8001806:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 800180a:	609a      	str	r2, [r3, #8]
  #endif /* DATA_IN_ExtSRAM */
#endif 

  /* Configure the System clock frequency, HCLK, PCLK2 and PCLK1 prescalers */
  /* Configure the Flash Latency cycles and enable prefetch buffer */
  SetSysClock();
 800180c:	f000 f80c 	bl	8001828 <SetSysClock>

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8001810:	4b04      	ldr	r3, [pc, #16]	; (8001824 <SystemInit+0x64>)
 8001812:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001816:	609a      	str	r2, [r3, #8]
#endif 
}
 8001818:	bf00      	nop
 800181a:	bd80      	pop	{r7, pc}
 800181c:	40021000 	.word	0x40021000
 8001820:	f8ff0000 	.word	0xf8ff0000
 8001824:	e000ed00 	.word	0xe000ed00

08001828 <SetSysClock>:
  * @brief  Configures the System clock frequency, HCLK, PCLK2 and PCLK1 prescalers.
  * @param  None
  * @retval None
  */
static void SetSysClock(void)
{
 8001828:	b580      	push	{r7, lr}
 800182a:	af00      	add	r7, sp, #0
#elif defined SYSCLK_FREQ_48MHz
  SetSysClockTo48();
#elif defined SYSCLK_FREQ_56MHz
  SetSysClockTo56();  
#elif defined SYSCLK_FREQ_72MHz
  SetSysClockTo72();
 800182c:	f000 f802 	bl	8001834 <SetSysClockTo72>
#endif
 
 /* If none of the define above is enabled, the HSI is used as System clock
    source (default after reset) */ 
}
 8001830:	bf00      	nop
 8001832:	bd80      	pop	{r7, pc}

08001834 <SetSysClockTo72>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
static void SetSysClockTo72(void)
{
 8001834:	b480      	push	{r7}
 8001836:	b083      	sub	sp, #12
 8001838:	af00      	add	r7, sp, #0
  __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
 800183a:	2300      	movs	r3, #0
 800183c:	607b      	str	r3, [r7, #4]
 800183e:	2300      	movs	r3, #0
 8001840:	603b      	str	r3, [r7, #0]
  
  /* SYSCLK, HCLK, PCLK2 and PCLK1 configuration ---------------------------*/    
  /* Enable HSE */    
  RCC->CR |= ((uint32_t)RCC_CR_HSEON);
 8001842:	4b3a      	ldr	r3, [pc, #232]	; (800192c <SetSysClockTo72+0xf8>)
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	4a39      	ldr	r2, [pc, #228]	; (800192c <SetSysClockTo72+0xf8>)
 8001848:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800184c:	6013      	str	r3, [r2, #0]
 
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
 800184e:	4b37      	ldr	r3, [pc, #220]	; (800192c <SetSysClockTo72+0xf8>)
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001856:	603b      	str	r3, [r7, #0]
    StartUpCounter++;  
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	3301      	adds	r3, #1
 800185c:	607b      	str	r3, [r7, #4]
  } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
 800185e:	683b      	ldr	r3, [r7, #0]
 8001860:	2b00      	cmp	r3, #0
 8001862:	d103      	bne.n	800186c <SetSysClockTo72+0x38>
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 800186a:	d1f0      	bne.n	800184e <SetSysClockTo72+0x1a>

  if ((RCC->CR & RCC_CR_HSERDY) != RESET)
 800186c:	4b2f      	ldr	r3, [pc, #188]	; (800192c <SetSysClockTo72+0xf8>)
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001874:	2b00      	cmp	r3, #0
 8001876:	d002      	beq.n	800187e <SetSysClockTo72+0x4a>
  {
    HSEStatus = (uint32_t)0x01;
 8001878:	2301      	movs	r3, #1
 800187a:	603b      	str	r3, [r7, #0]
 800187c:	e001      	b.n	8001882 <SetSysClockTo72+0x4e>
  }
  else
  {
    HSEStatus = (uint32_t)0x00;
 800187e:	2300      	movs	r3, #0
 8001880:	603b      	str	r3, [r7, #0]
  }  

  if (HSEStatus == (uint32_t)0x01)
 8001882:	683b      	ldr	r3, [r7, #0]
 8001884:	2b01      	cmp	r3, #1
 8001886:	d14b      	bne.n	8001920 <SetSysClockTo72+0xec>
  {
    /* Enable Prefetch Buffer */
    FLASH->ACR |= FLASH_ACR_PRFTBE;
 8001888:	4b29      	ldr	r3, [pc, #164]	; (8001930 <SetSysClockTo72+0xfc>)
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	4a28      	ldr	r2, [pc, #160]	; (8001930 <SetSysClockTo72+0xfc>)
 800188e:	f043 0310 	orr.w	r3, r3, #16
 8001892:	6013      	str	r3, [r2, #0]

    /* Flash 2 wait state */
    FLASH->ACR &= (uint32_t)((uint32_t)~FLASH_ACR_LATENCY);
 8001894:	4b26      	ldr	r3, [pc, #152]	; (8001930 <SetSysClockTo72+0xfc>)
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	4a25      	ldr	r2, [pc, #148]	; (8001930 <SetSysClockTo72+0xfc>)
 800189a:	f023 0303 	bic.w	r3, r3, #3
 800189e:	6013      	str	r3, [r2, #0]
    FLASH->ACR |= (uint32_t)FLASH_ACR_LATENCY_2;    
 80018a0:	4b23      	ldr	r3, [pc, #140]	; (8001930 <SetSysClockTo72+0xfc>)
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	4a22      	ldr	r2, [pc, #136]	; (8001930 <SetSysClockTo72+0xfc>)
 80018a6:	f043 0302 	orr.w	r3, r3, #2
 80018aa:	6013      	str	r3, [r2, #0]

 
    /* HCLK = SYSCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_HPRE_DIV1;
 80018ac:	4b1f      	ldr	r3, [pc, #124]	; (800192c <SetSysClockTo72+0xf8>)
 80018ae:	4a1f      	ldr	r2, [pc, #124]	; (800192c <SetSysClockTo72+0xf8>)
 80018b0:	685b      	ldr	r3, [r3, #4]
 80018b2:	6053      	str	r3, [r2, #4]
      
    /* PCLK2 = HCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE2_DIV1;
 80018b4:	4b1d      	ldr	r3, [pc, #116]	; (800192c <SetSysClockTo72+0xf8>)
 80018b6:	4a1d      	ldr	r2, [pc, #116]	; (800192c <SetSysClockTo72+0xf8>)
 80018b8:	685b      	ldr	r3, [r3, #4]
 80018ba:	6053      	str	r3, [r2, #4]
    
    /* PCLK1 = HCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE1_DIV2;
 80018bc:	4b1b      	ldr	r3, [pc, #108]	; (800192c <SetSysClockTo72+0xf8>)
 80018be:	685b      	ldr	r3, [r3, #4]
 80018c0:	4a1a      	ldr	r2, [pc, #104]	; (800192c <SetSysClockTo72+0xf8>)
 80018c2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80018c6:	6053      	str	r3, [r2, #4]
    RCC->CFGR &= (uint32_t)~(RCC_CFGR_PLLXTPRE | RCC_CFGR_PLLSRC | RCC_CFGR_PLLMULL);
    RCC->CFGR |= (uint32_t)(RCC_CFGR_PLLXTPRE_PREDIV1 | RCC_CFGR_PLLSRC_PREDIV1 | 
                            RCC_CFGR_PLLMULL9); 
#else    
    /*  PLL configuration: PLLCLK = HSE * 9 = 72 MHz */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_PLLSRC | RCC_CFGR_PLLXTPRE |
 80018c8:	4b18      	ldr	r3, [pc, #96]	; (800192c <SetSysClockTo72+0xf8>)
 80018ca:	685b      	ldr	r3, [r3, #4]
 80018cc:	4a17      	ldr	r2, [pc, #92]	; (800192c <SetSysClockTo72+0xf8>)
 80018ce:	f423 137c 	bic.w	r3, r3, #4128768	; 0x3f0000
 80018d2:	6053      	str	r3, [r2, #4]
                                        RCC_CFGR_PLLMULL));
    RCC->CFGR |= (uint32_t)(RCC_CFGR_PLLSRC_HSE | RCC_CFGR_PLLMULL9);
 80018d4:	4b15      	ldr	r3, [pc, #84]	; (800192c <SetSysClockTo72+0xf8>)
 80018d6:	685b      	ldr	r3, [r3, #4]
 80018d8:	4a14      	ldr	r2, [pc, #80]	; (800192c <SetSysClockTo72+0xf8>)
 80018da:	f443 13e8 	orr.w	r3, r3, #1900544	; 0x1d0000
 80018de:	6053      	str	r3, [r2, #4]
#endif /* STM32F10X_CL */

    /* Enable PLL */
    RCC->CR |= RCC_CR_PLLON;
 80018e0:	4b12      	ldr	r3, [pc, #72]	; (800192c <SetSysClockTo72+0xf8>)
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	4a11      	ldr	r2, [pc, #68]	; (800192c <SetSysClockTo72+0xf8>)
 80018e6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80018ea:	6013      	str	r3, [r2, #0]

    /* Wait till PLL is ready */
    while((RCC->CR & RCC_CR_PLLRDY) == 0)
 80018ec:	bf00      	nop
 80018ee:	4b0f      	ldr	r3, [pc, #60]	; (800192c <SetSysClockTo72+0xf8>)
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	d0f9      	beq.n	80018ee <SetSysClockTo72+0xba>
    {
    }
    
    /* Select PLL as system clock source */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 80018fa:	4b0c      	ldr	r3, [pc, #48]	; (800192c <SetSysClockTo72+0xf8>)
 80018fc:	685b      	ldr	r3, [r3, #4]
 80018fe:	4a0b      	ldr	r2, [pc, #44]	; (800192c <SetSysClockTo72+0xf8>)
 8001900:	f023 0303 	bic.w	r3, r3, #3
 8001904:	6053      	str	r3, [r2, #4]
    RCC->CFGR |= (uint32_t)RCC_CFGR_SW_PLL;    
 8001906:	4b09      	ldr	r3, [pc, #36]	; (800192c <SetSysClockTo72+0xf8>)
 8001908:	685b      	ldr	r3, [r3, #4]
 800190a:	4a08      	ldr	r2, [pc, #32]	; (800192c <SetSysClockTo72+0xf8>)
 800190c:	f043 0302 	orr.w	r3, r3, #2
 8001910:	6053      	str	r3, [r2, #4]

    /* Wait till PLL is used as system clock source */
    while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS) != (uint32_t)0x08)
 8001912:	bf00      	nop
 8001914:	4b05      	ldr	r3, [pc, #20]	; (800192c <SetSysClockTo72+0xf8>)
 8001916:	685b      	ldr	r3, [r3, #4]
 8001918:	f003 030c 	and.w	r3, r3, #12
 800191c:	2b08      	cmp	r3, #8
 800191e:	d1f9      	bne.n	8001914 <SetSysClockTo72+0xe0>
  }
  else
  { /* If HSE fails to start-up, the application will have wrong clock 
         configuration. User can add here some code to deal with this error */
  }
}
 8001920:	bf00      	nop
 8001922:	370c      	adds	r7, #12
 8001924:	46bd      	mov	sp, r7
 8001926:	bc80      	pop	{r7}
 8001928:	4770      	bx	lr
 800192a:	bf00      	nop
 800192c:	40021000 	.word	0x40021000
 8001930:	40022000 	.word	0x40022000

08001934 <__libc_init_array>:
 8001934:	b570      	push	{r4, r5, r6, lr}
 8001936:	2500      	movs	r5, #0
 8001938:	4e0c      	ldr	r6, [pc, #48]	; (800196c <__libc_init_array+0x38>)
 800193a:	4c0d      	ldr	r4, [pc, #52]	; (8001970 <__libc_init_array+0x3c>)
 800193c:	1ba4      	subs	r4, r4, r6
 800193e:	10a4      	asrs	r4, r4, #2
 8001940:	42a5      	cmp	r5, r4
 8001942:	d109      	bne.n	8001958 <__libc_init_array+0x24>
 8001944:	f000 f826 	bl	8001994 <_init>
 8001948:	2500      	movs	r5, #0
 800194a:	4e0a      	ldr	r6, [pc, #40]	; (8001974 <__libc_init_array+0x40>)
 800194c:	4c0a      	ldr	r4, [pc, #40]	; (8001978 <__libc_init_array+0x44>)
 800194e:	1ba4      	subs	r4, r4, r6
 8001950:	10a4      	asrs	r4, r4, #2
 8001952:	42a5      	cmp	r5, r4
 8001954:	d105      	bne.n	8001962 <__libc_init_array+0x2e>
 8001956:	bd70      	pop	{r4, r5, r6, pc}
 8001958:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800195c:	4798      	blx	r3
 800195e:	3501      	adds	r5, #1
 8001960:	e7ee      	b.n	8001940 <__libc_init_array+0xc>
 8001962:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001966:	4798      	blx	r3
 8001968:	3501      	adds	r5, #1
 800196a:	e7f2      	b.n	8001952 <__libc_init_array+0x1e>
 800196c:	080019ac 	.word	0x080019ac
 8001970:	080019ac 	.word	0x080019ac
 8001974:	080019ac 	.word	0x080019ac
 8001978:	080019b0 	.word	0x080019b0
 800197c:	3044434c 	.word	0x3044434c
 8001980:	00000000 	.word	0x00000000
 8001984:	3144434c 	.word	0x3144434c
 8001988:	00000000 	.word	0x00000000
 800198c:	454c4449 	.word	0x454c4449
 8001990:	00000000 	.word	0x00000000

08001994 <_init>:
 8001994:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001996:	bf00      	nop
 8001998:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800199a:	bc08      	pop	{r3}
 800199c:	469e      	mov	lr, r3
 800199e:	4770      	bx	lr

080019a0 <_fini>:
 80019a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80019a2:	bf00      	nop
 80019a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80019a6:	bc08      	pop	{r3}
 80019a8:	469e      	mov	lr, r3
 80019aa:	4770      	bx	lr
